{"version":3,"sources":["actions/mobileAnimationActions.ts","reducers/initialState.ts","reducers/mobileAnimationReducer.ts","actions/dataProviderActions.ts","reducers/dataReducer.ts","actions/selectDataActions.ts","actions/connectionDataActions.ts","reducers/connectionDateReducer.ts","actions/pathsActions.ts","reducers/pathReducer.ts","reducers/rootReducer.ts","reducers/selectDataReducer.ts","store/store.ts","components/NavButton/NavButton.tsx","components/Nav/Nav.tsx","services/mapProviders/helpers.ts","services/mapProviders/mainPageMapProvider.ts","data/enums/Day.ts","components/MainPageMap/MainPageMap.tsx","components/MainPage/MainPage.tsx","components/FilterStationsByName/FilterStationsByName.tsx","components/FilterStationByLines/FilterStationsByLines.tsx","components/StationFilters/StationFilters.tsx","services/filters/StationsFilter.ts","components/StationComponent/StationComponent.tsx","components/StationChoosing/StationChoosing.tsx","components/TrainStationWrapper/TrainStationWrapper.tsx","components/LineFilterByName/LineFilterByName.tsx","components/LineFilterByStations/LineFilterByStations.tsx","components/LineFilters/LineFilters.tsx","services/filters/LinesFilter/LinesFilter.ts","components/LineComponent/LineComponent.tsx","components/LinesChoosing/LinesChoosing.tsx","components/TrainChoosingWrapper/TrainChoosingWrapper.tsx","components/ChooseStationsForConnection/ChooseStationsForConnection.tsx","components/ConnectionsDataChoosing/ConnectionsDataChoosing.tsx","data/classes/WeekDate.ts","services/WeekDateConverter/WeekDateConverter.ts","data/classes/GraphNode.ts","data/classes/Node.ts","data/classes/GraphEdge.ts","services/trainTimeComputer/DistanceComputer.ts","services/trainTimeComputer/TrainTimeComputer.ts","data/classes/PriorityQueue.ts","data/classes/Graph.ts","components/Connection/Connection.tsx","components/ConnectionsWrapper/ConnectionsWrapper.tsx","components/ConnectionChoosingWrapper/ConnectionChoosingWrapper.tsx","data/classes/Station.ts","data/classes/Line.ts","services/dataProvider/DataProvider.ts","components/Content/Content.tsx","services/mapProviders/StationDetailsMapProvider.ts","components/StationMap/StationMap.tsx","components/StationDeparturesTimes/StationDeparturesTimes.tsx","components/StationDetailsLine/StationDetailsLine.tsx","components/StationDetailsLinesWrapper/StationDetailsLinesWrapper.tsx","components/StationDetails/StationDetails.tsx","services/mapProviders/LineDetailsMapProvider.ts","components/LineMap/LineMap.tsx","components/LineDetailsStationsWrapper/LineDetailsStationsWrapper.tsx","components/LineDetails/LineDetails.tsx","components/StationTime/StationTime.tsx","components/OneLineConnection/OneLineConnection.tsx","components/OneConnectionDetails/OneConnectionDetails.tsx","services/mapProviders/ConnectionMapProvider.ts","components/ConnectionMap/ConnectionMap.tsx","components/ConnectionDetails/ConnectionDetails.tsx","components/PopupWrapper/PopupWrapper.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["SHOW","HIDE","initialState","data","stations","lines","speed","mobileAnimation","selectedStations","selectedLines","beginStation","endStation","departureTime","paths","maxPaths","nextConnectionTime","mobileAnimationReducer","state","action","type","LOAD_DATA","dataReducer","payload","ADD_STATION","REMOVE_STATION","ADD_LINE","REMOVE_LINE","REMOVE_ALL_LINES","REMOVE_ALL_STATIONS","ADD_ALL_LINES","ADD_ALL_STATIONS","removeAllLines","removeALLStations","ADD_BEGIN_STATION","REMOVE_BEGIN_STATION","ADD_END_STATION","REMOVE_END_STATION","ADD_DEPARTURE_TIME","REMOVE_DEPARTURE_TIME","addBeginStation","station","removeBeginStation","addEndStation","removeEndStation","addDepartureTime","date","removeDepartureTime","connectionDataReducer","ADD_PATH","REMOVE_ALL_PATHS","INCREASE_MAX_PATHS","RESET_MAX_PATHS","ADD_NEXT_CONNECTION_TIME","RESET_NEXT_CONNECTION_TIME","addPath","path","removeALLPaths","increaseMaxPaths","newNumber","resetMaxPaths","addNextConnectionTime","weekDate","resetNextConnectionTime","pathReducer","rootReducer","combineReducers","selectedData","filter","id","line","name","flat","connection","connectionDateReducer","store","createStore","NavButton","url","useSelector","className","to","options","Nav","useState","showMobileMenu","setShowMobileMenu","dispatch","useDispatch","buttons","map","option","onClick","width","height","y","fill","currentClicked","undefined","legendShowed","handleClickOnUpperLabel","document","getElementById","classList","remove","add","rotateIcon","$","addClass","removeClass","handleClickOnSpan","spanElement","clickedLine","unClickedLine","hideAllLines","lineName","children","innerHTML","split","showLine","showAllLines","MainPageMapProvider","polyLines","forEach","polyLineObj","polyLine","addTo","getInstance","find","instance","isLayerAdded","L","setView","tileLayer","attribution","marker","location","lat","lon","bindPopup","color","points","polyline","setStyle","weight","push","colors","legend","control","position","onAdd","div","DomUtil","create","labels","index","begin","end","upperLaber","join","toArray","addEventListener","css","Day","linesColors","MainPageMap","useEffect","addMap","length","addPointsToTheMap","drawLineOfStations","createLegend","removeMap","MainPage","FilterStationsByName","dispatcher","stationOptions","label","value","toString","placeholder","onChange","foundStation","animatedComponents","makeAnimated","FilterStationsByLines","lineOptions","foundLines","addAllLines","components","isMulti","StationFilters","StationsFilter","allStations","flag","stationToFind","StationComponent","props","history","useHistory","StationChoosing","filteredStations","sort","a","b","stationComponents","TrainStationWrapper","LineFilterByName","linesOptions","foundLine","LineFilterByStations","foundStations","addAllStations","LineFilters","LinesFilter","allLines","stationsMatch","LineComponent","LinesChoosing","filteredLines","lineComponents","TrainChoosingWrapper","ChooseStationsForConnection","currentStation","propName","stationsOptions","currentValue","removeAction","addAction","ConnectionsDataChoosing","Date","handleDateChange","dateFromPicker","utils","DateFnsUtils","locale","pl","DatePicker","TimePicker","ampm","WeekDate","weekDay","hours","minutes","seconds","_seconds","_weekDay","_hours","_minutes","this","WeekDateConverter","convertToSeconds","weekDateConverter","newWeekDate","convert","day","Math","trunc","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY","secondsComputed","getSeconds","getMinutes","getHours","getDay","currentTime","convertFromDate","console","log","movement","getTime","Infinity","GraphNode","visited","reversed","_line","_weekDate","_previous_node","_reversed","edge","_neighbours","_visited","_station","GraphEdge","destination","source","_cost","_destination","_source","DistanceComputer","point1","point2","acos","sin","degreesToRadians","cos","degrees","PI","TrainTimeComputer","stationIndex","indexOf","stationToCurrentStation","concat","slice","reverse","departuresTime","time","computeTimeBetweenStationsChain","currentTimeInSeconds","biggerTime","computeDistance","kmhToMs","result","i","computeTime","PriorityQueue","comparator","_comparator","_queue","heapMap","n","copy","e","isLeaf","left","right","isHeap","hasLeft","hasRight","repairHeap","biggest","heapCondition","parent","size","pop","Graph","_lines","_time","destinationStation","_nodes","createNodes","nodes","sameStationNodes","nodeFirstIter","firstIndex","nodeSecondIter","secondIndex","edge1","edge2","addNeighbour","stationNumber","graphNode","filteredNodes","node","neighbours","previous_node","firstNode","loadBeginNeighbours","queue","neighbour","currentCost","predictedCost","getTimeOfTheNextTrain","dest","Connection","beginTime","arriveTime","p","random","connectionURL","hoursString","minutesString","ConnectionsWrapper","window","scroll","scrollTop","handleLoadMore","off","graph","setDestinationAndBeginning","computeBestTime","getFastestPath","loadMoreButton","ConnectionChoosingWrapper","Station","_name","_id","_location","Line","_stations","_begin","_end","DataProvider","axios","all","get","then","responses","createLineObject","catch","error","lineStations","stationID","weekDays","Content","fetchData","loadData","exact","component","StationDetailsMapProvider","loc","StationMap","mapProvider","addStationToTheMap","StationDeparturesTimes","trainsSpeed","reduce","r","Object","entries","key","polishWeekDayName","getPolishNameOfTheWeekDay","parseInt","StationList","stationsHTML","arrow","StationDetailsLine","showForward","setShowForward","showReverse","setShowReverse","style","StationDetailsLinesWrapper","stationDetailsLines","StationDidntFound","StationDetails","useParams","LineDetailsMapProvider","LineMap","drawLine","LineDetailsStationsWrapper","LineDidntFound","LineDetails","toUpperCase","StationTime","OneLineConnection","backgroundColor","OneConnectionDetails","currentLines","colorIndex","ConnectionMapProvider","stringDate","poly","ConnectionMap","connectionMap","addConnections","ConnectionDetails","stationsFromState","linesFromState","stringDataFromParams","PopupWrapper","App","basename","process","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.280f1182.chunk.js","sourcesContent":["export const SHOW: string = 'SHOW'\nexport const HIDE: string = 'HIDE'\n\nexport const showAnimation = () => ({\n    type: SHOW,\n    payload: {}\n})\n\nexport const hideAnimation = () => ({\n    type: HIDE,\n    payload: {}\n})","import Station from \"../data/classes/Station\";\nimport WeekDate from \"../data/classes/WeekDate\";\n\nconst initialState = {\n    data: {\n        stations: [],\n        lines: [],\n        speed: null\n    },\n    mobileAnimation: false,\n    selectedStations: [],\n    selectedLines: [],\n    beginStation: null,\n    endStation: null,\n    departureTime: null,\n    paths: [],\n    maxPaths: 3,\n    nextConnectionTime: null\n\n}\nexport default initialState;","import {\n    SHOW, HIDE\n} from \"../actions/mobileAnimationActions\";\nimport {ActionType} from \"../actions/actionType\";\nimport initialState from \"./initialState\";\n\nconst mobileAnimationReducer = (state: typeof initialState = initialState, action: ActionType) => {\n    switch (action.type){\n        case SHOW:\n            return {\n                ...state,\n                mobileAnimation: true\n            }\n        case HIDE:\n            return {\n                ...state,\n                mobileAnimation: false\n            }\n        default:\n            return state\n    }\n}\n\nexport default mobileAnimationReducer;","import Station from \"../data/classes/Station\";\nimport Line from \"../data/classes/Line\";\n\nexport const LOAD_DATA = 'LOAD_DATA'\n\ntype loadDataType = {\n    stations: Station[],\n    lines: Line[],\n    speed: number\n}\n\nexport const loadData = ({stations, lines, speed}: loadDataType) => ({\n    type: LOAD_DATA,\n    payload: {\n        stations,\n        lines,\n        speed\n    }\n})","import {ActionType} from \"../actions/actionType\";\nimport {LOAD_DATA} from \"../actions/dataProviderActions\";\nimport initialState from \"./initialState\";\n\nconst dataReducer = (state:typeof initialState = initialState, action: ActionType) => {\n    switch (action.type) {\n        case LOAD_DATA:\n            return {\n                ...state,\n                data: action.payload\n            }\n        default:\n            return state\n    }\n}\n\nexport default dataReducer;","import Station from \"../data/classes/Station\";\nimport Line from \"../data/classes/Line\";\n\nexport const ADD_STATION = 'ADD_STATION'\nexport const REMOVE_STATION = 'REMOVE_STATION'\nexport const ADD_LINE = 'ADD_LINE'\nexport const REMOVE_LINE = 'REMOVE_LINE'\nexport const REMOVE_ALL_LINES = 'REMOVE_ALL_LINES'\nexport const REMOVE_ALL_STATIONS = 'REMOVE_ALL_STATIONS'\nexport const ADD_ALL_LINES = 'ADD_ALL_LINES'\nexport const ADD_ALL_STATIONS = 'ADD_ALL_STATIONS'\n\nexport const addStation = (station: Station) => ({\n    type: ADD_STATION,\n    payload: station\n})\n\nexport const removeStation = (id: number) => ({\n    type: REMOVE_STATION,\n    payload: id\n})\n\nexport const addLine = (line: Line) => ({\n    type: ADD_LINE,\n    payload: line\n})\n\nexport const removeLine = (name: string) => ({\n    type: REMOVE_LINE,\n    payload: name\n})\n\nexport const removeAllLines = () => ({\n    type: REMOVE_ALL_LINES,\n    payload: {}\n})\n\nexport const removeALLStations = () => ({\n    type: REMOVE_ALL_STATIONS,\n    payload: {}\n})\n\nexport const addAllLines = (lines: Line[]) => ({\n    type: ADD_ALL_LINES,\n    payload: lines\n})\n\nexport const addAllStations = (stations: Station[]) => ({\n    type: ADD_ALL_STATIONS,\n    payload: stations\n})\n","import Station from \"../data/classes/Station\";\n\nexport const ADD_BEGIN_STATION = 'ADD_BEGIN_STATION'\nexport const REMOVE_BEGIN_STATION = 'REMOVE_BEGIN_STATION'\nexport const ADD_END_STATION = 'ADD_END_STATION'\nexport const REMOVE_END_STATION = 'REMOVE_END_STATION'\nexport const ADD_DEPARTURE_TIME = 'ADD_DEPARTURE_TIME'\nexport const REMOVE_DEPARTURE_TIME = 'REMOVE_DEPARTURE_TIME'\n\nexport const addBeginStation = (station: Station) => {\n    return{\n        type: ADD_BEGIN_STATION,\n        payload: station\n    }\n}\n\nexport const removeBeginStation = () => {\n    return{\n        type: REMOVE_BEGIN_STATION,\n        payload: {}\n    }\n}\n\nexport const addEndStation = (station: Station) => {\n    return{\n        type: ADD_END_STATION,\n        payload: station\n    }\n}\n\nexport const removeEndStation = () => {\n    return{\n        type: REMOVE_END_STATION,\n        payload: {}\n    }\n}\n\nexport const addDepartureTime = (date: Date) => {\n    return{\n        type: ADD_DEPARTURE_TIME,\n        payload: date\n    }\n}\n\nexport const removeDepartureTime = () => {\n    return{\n        type: REMOVE_DEPARTURE_TIME,\n        payload: {}\n    }\n}\n\n","import initialState from \"./initialState\";\nimport {ActionType} from \"../actions/actionType\";\nimport {\n    ADD_BEGIN_STATION, ADD_DEPARTURE_TIME,\n    ADD_END_STATION,\n    REMOVE_BEGIN_STATION, REMOVE_DEPARTURE_TIME,\n    REMOVE_END_STATION\n} from \"../actions/connectionDataActions\";\n\n\nconst connectionDataReducer =  (state:typeof initialState = initialState, action: ActionType)  => {\n    switch (action.type){\n        case ADD_BEGIN_STATION:\n            return{\n                ...state,\n                beginStation: action.payload\n            }\n        case REMOVE_BEGIN_STATION:\n            return{\n                ...state,\n                beginStation: null\n            }\n        case ADD_END_STATION:\n            return{\n                ...state,\n                endStation: action.payload\n            }\n        case REMOVE_END_STATION:\n            return{\n                ...state,\n                endStation: null\n            }\n        case ADD_DEPARTURE_TIME:\n            return{\n                ...state,\n                departureTime: action.payload\n            }\n        case REMOVE_DEPARTURE_TIME:\n            return{\n                ...state,\n                departureTime: null\n            }\n        default:\n            return state\n    }\n}\n\nexport default connectionDataReducer;","import WeekDate from \"../data/classes/WeekDate\";\n\nexport const ADD_PATH = 'ADD_PATH'\nexport const REMOVE_ALL_PATHS = 'REMOVE_ALL_PATHS'\nexport const INCREASE_MAX_PATHS = 'INCREASE_MAX_PATHS'\nexport const RESET_MAX_PATHS = 'RESET_MAX_PATHS'\nexport const ADD_NEXT_CONNECTION_TIME = 'ADD_NEXT_CONNECTION_TIME'\nexport const RESET_NEXT_CONNECTION_TIME = 'RESET_NEXT_CONNECTION_TIME'\n\nexport const addPath = (path: any) => {\n    return{\n        type: ADD_PATH,\n        payload: path\n    }\n}\n\nexport const removeALLPaths = () => {\n    return{\n        type: REMOVE_ALL_PATHS,\n        payload: {}\n    }\n}\n\nexport const increaseMaxPaths = (newNumber: number) => {\n    return{\n        type: INCREASE_MAX_PATHS,\n        payload: newNumber\n    }\n}\n\nexport const resetMaxPaths = () => {\n    return{\n        type: RESET_MAX_PATHS,\n        payload: {}\n    }\n}\n\nexport const addNextConnectionTime = (weekDate: WeekDate) => {\n    return{\n        type: ADD_NEXT_CONNECTION_TIME,\n        payload: weekDate\n    }\n}\n\nexport const resetNextConnectionTime = () => {\n    return{\n        type: RESET_NEXT_CONNECTION_TIME,\n        payload: {}\n    }\n}","import initialState from \"./initialState\";\nimport {ActionType} from \"../actions/actionType\";\nimport {\n    ADD_NEXT_CONNECTION_TIME,\n    ADD_PATH,\n    INCREASE_MAX_PATHS,\n    REMOVE_ALL_PATHS,\n    RESET_MAX_PATHS, RESET_NEXT_CONNECTION_TIME\n} from \"../actions/pathsActions\";\n\nconst pathReducer = (state:typeof initialState = initialState, action: ActionType) => {\n    switch (action.type){\n        case ADD_PATH:\n            return{\n                ...state,\n                paths: [...state.paths, action.payload]\n            }\n        case REMOVE_ALL_PATHS:\n            return {\n                ...state,\n                paths: []\n            }\n        case INCREASE_MAX_PATHS:\n            return{\n                ...state,\n                maxPaths: state.maxPaths + action.payload\n            }\n        case RESET_MAX_PATHS:\n            return {\n                ...state,\n                maxPaths: 3\n            }\n        case ADD_NEXT_CONNECTION_TIME:\n            return {\n                ...state,\n                nextConnectionTime: action.payload\n            }\n        case RESET_NEXT_CONNECTION_TIME:\n            return {\n                ...state,\n                nextConnectionTime: null\n            }\n        default:\n            return state\n    }\n}\n\nexport default pathReducer;","import { combineReducers } from \"@reduxjs/toolkit\";\n\nimport mobileAnimationReducer from \"./mobileAnimationReducer\";\nimport dataReducer from \"./dataReducer\";\nimport {selectDataReducer} from \"./selectDataReducer\";\nimport connectionDateReducer from \"./connectionDateReducer\";\nimport pathReducer from \"./pathReducer\";\n\nexport const rootReducer = combineReducers({\n    mobileAnimation: mobileAnimationReducer,\n    data: dataReducer,\n    selectedData: selectDataReducer,\n    connection: connectionDateReducer,\n    path: pathReducer\n})\n\nexport type RootState = ReturnType<typeof rootReducer>","import initialState from \"./initialState\";\nimport {ActionType} from \"../actions/actionType\";\nimport {\n    ADD_ALL_LINES, ADD_ALL_STATIONS,\n    ADD_LINE,\n    ADD_STATION,\n    REMOVE_ALL_LINES,\n    REMOVE_ALL_STATIONS,\n    REMOVE_LINE,\n    REMOVE_STATION\n} from \"../actions/selectDataActions\";\nimport Station from \"../data/classes/Station\";\nimport Line from \"../data/classes/Line\";\n\nexport const selectDataReducer = (state: typeof initialState = initialState, action: ActionType) => {\n    switch (action.type) {\n        case ADD_STATION:\n            return{\n                ...state,\n                selectedStations: [...state.selectedStations, action.payload]\n            }\n        case REMOVE_STATION:\n            return{\n                ...state,\n                selectedStations: state.selectedStations.filter((station: Station) => station.id !== action.payload)\n            }\n        case ADD_LINE:\n            return{\n                ...state,\n                selectedLines: [...state.selectedLines, action.payload]\n            }\n        case REMOVE_LINE:\n            return {\n                ...state,\n                selectedLines: state.selectedLines.filter((line: Line) => line.name !== action.payload)\n            }\n        case REMOVE_ALL_STATIONS:\n            return {\n                ...state,\n                selectedStations: []\n            }\n        case REMOVE_ALL_LINES:\n            return {\n                ...state,\n                selectedLines: []\n            }\n        case ADD_ALL_LINES:\n            return {\n                ...state,\n                selectedLines: [...state.selectedLines, action.payload].flat(1)\n            }\n        case ADD_ALL_STATIONS:\n            return {\n                ...state,\n                selectedStations: [...state.selectedStations, action.payload].flat(1)\n            }\n        default:\n            return state\n    }\n}","import {createStore} from \"@reduxjs/toolkit\";\n\nimport {rootReducer} from \"../reducers/rootReducer\";\n\nexport const store = createStore(rootReducer);","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nimport './NavButton.css'\nimport {useSelector} from \"react-redux\";\nimport {RootState} from \"../../reducers/rootReducer\";\n\ntype propsType = {\n    name: string,\n    url: string,\n    id: number\n}\n\nconst NavButton = ({ name, url, id } : propsType) => {\n\n    const mobileAnimation = useSelector((store: RootState) => store.mobileAnimation)\n\n    return (\n        <li className={mobileAnimation.mobileAnimation ? \"menu-element active-menu\" : \"menu-element hidden-menu\"}\n            id={\"menu-element-\"+id}\n        >\n            <Link className=\"menu-link\" to={url}>{name}</Link>\n        </li>\n\n    );\n}\n\nexport default NavButton;","import React, {useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport { showAnimation, hideAnimation } from \"../../actions/mobileAnimationActions\";\nimport NavButton from \"../NavButton/NavButton\";\nimport './Nav.css'\nimport {RootState} from \"../../reducers/rootReducer\";\n\nconst options = [\n    {name: 'Strona Główna', url: '/'},\n    {name: 'Przystanki', url: '/przystanki'},\n    {name: 'Połączenia', url: '/linie'},\n    {name: 'Znajdź Trasę', url: '/znajdz-trase'}\n]\n\nconst Nav = () => {\n\n    const [showMobileMenu, setShowMobileMenu] = useState(false);\n    const dispatch = useDispatch();\n\n    const buttons = options.map((option, id: number) =>\n        <NavButton\n            id={id}\n            key={option.name}\n            name={option.name}\n            url={option.url}\n        />)\n\n    const handleSetShowMobileMenu = () => {\n        if(showMobileMenu){\n            dispatch(hideAnimation())\n            setShowMobileMenu(false)\n        }\n        else{\n            dispatch(showAnimation())\n            setShowMobileMenu(true)\n        }\n    }\n\n    return (\n        <>\n            <div className=\"mobile-menu\" onClick={handleSetShowMobileMenu}>\n                <svg width=\"40\" height=\"36\">\n                    <rect y=\"0\" width=\"40\" height=\"6\" fill=\"#a1a1a1\" className={showMobileMenu ? 'upper-bar-active' : 'upper-or-down-bar-inactive'}  />\n                    <rect y=\"15\" width=\"40\" height=\"6\" fill=\"#a1a1a1\" className={showMobileMenu ? 'middle-bar-active' : 'middle-bar-inactive'} />\n                    <rect y=\"30\" width=\"40\" height=\"6\" fill=\"#a1a1a1\" className={showMobileMenu ? 'down-bar-active' : 'upper-or-down-bar-inactive'} />\n                </svg>\n            </div>\n            <header className={showMobileMenu ? \"big-z-index\" : \"low-z-index\"}>\n                <nav>\n                    <ul className={showMobileMenu ? \"main-menu big-z-index\" : \"main-menu low-z-index\"}>\n                        {buttons}\n                    </ul>\n                </nav>\n            </header>\n        </>\n\n    );\n}\n\nexport default Nav;","import $ from \"jquery\";\nimport MainPageMapProvider from \"./mainPageMapProvider\";\n\nlet currentClicked: HTMLSpanElement|undefined = undefined\nlet legendShowed = false\n\nexport const addFunctionsToLegend = () =>{\n    $('.legend-fragment').toArray().forEach(spanElement => {\n        spanElement.addEventListener(\"click\", () => handleClickOnSpan(spanElement))\n    })\n}\n\nexport const makeLegendDropDown = () => {\n    (document.getElementById(\"upper-label\") as HTMLElement).addEventListener(\"click\", handleClickOnUpperLabel);\n}\n\nconst handleClickOnUpperLabel = () => {\n    if(!legendShowed){\n        (document.getElementById(\"labels-container\") as HTMLDivElement).classList.add(\"show-legend\");\n        (document.getElementById(\"labels-container\") as HTMLDivElement).classList.remove(\"hide-legend\");\n        legendShowed = true\n        rotateIcon()\n    }\n    else{\n        (document.getElementById(\"labels-container\") as HTMLDivElement).classList.remove(\"show-legend\");\n        (document.getElementById(\"labels-container\") as HTMLDivElement).classList.add(\"hide-legend\");\n        legendShowed = false\n        rotateIcon()\n    }\n}\n\nconst rotateIcon = () => {\n    if(legendShowed){\n        $(\".legend i\").addClass('unrotate-icon')\n        $(\".legend i\").removeClass('rotate-icon')\n    }\n    else{\n        $(\".legend i\").removeClass('unrotate-icon')\n        $(\".legend i\").addClass('rotate-icon')\n    }\n\n}\n\nconst handleClickOnSpan = (spanElement: HTMLSpanElement) => {\n    if(currentClicked === undefined){\n        clickedLine(spanElement)\n    }\n    else if(currentClicked !== undefined && currentClicked !== spanElement){\n        unClickedLine(currentClicked);\n        clickedLine(spanElement)\n    }\n    else if(currentClicked === spanElement){\n        unClickedLine(spanElement)\n    }\n}\n\nconst clickedLine = (spanElement: HTMLSpanElement) => {\n    spanElement.classList.remove('not-hover-line')\n    spanElement.classList.add('hover-line')\n    hideAllLines()\n    const lineName = spanElement.children[1].innerHTML.split(':')[0]\n    showLine(lineName)\n    currentClicked = spanElement\n}\n\nconst unClickedLine = (spanElement: HTMLSpanElement) => {\n    spanElement.classList.add('not-hover-line')\n    spanElement.classList.remove('hover-line')\n    showAllLines()\n    currentClicked = undefined\n}\n\nconst hideAllLines = () => {\n    MainPageMapProvider.polyLines.forEach(polyLineObj => {\n        polyLineObj.polyLine.remove()\n    })\n}\n\nconst showAllLines = () => {\n    MainPageMapProvider.polyLines.forEach(polyLineObj => {\n        polyLineObj.polyLine.addTo(MainPageMapProvider.getInstance().map)\n    })\n}\n\nconst hideLine = (lineName: string) => {\n    const polyLine = MainPageMapProvider.polyLines.find(polyLineObj => {\n        return polyLineObj.lineName === lineName\n    })\n    if(polyLine === undefined){\n        throw 'didnt found polyline for a line: '+lineName\n    }\n    polyLine.polyLine.remove()\n}\n\nconst showLine = (lineName: string) => {\n    const polyLine = MainPageMapProvider.polyLines.find(polyLineObj => {\n        return polyLineObj.lineName === lineName\n    })\n    if(polyLine === undefined){\n        throw 'didnt found polyline for a line: '+lineName\n    }\n    polyLine.polyLine.addTo(MainPageMapProvider.getInstance().map);\n}","import L, {Control, LatLngExpression, Polyline} from 'leaflet'\nimport $ from \"jquery\";\nimport Station from \"../../data/classes/Station\";\nimport Line from \"../../data/classes/Line\";\nimport {addFunctionsToLegend, makeLegendDropDown} from \"./helpers\";\n\ntype linePolyLine = {\n    lineName: string,\n    polyLine: Polyline\n}\n\nexport default class MainPageMapProvider{\n    private static instance: MainPageMapProvider;\n    private static isLayerAdded: boolean = false;\n    public static polyLines: linePolyLine[] = [];\n\n    public map: any;\n\n    private constructor() {\n\n    }\n\n    public static getInstance(){\n        let div = $('#mapid');\n        let width:number | undefined = div.width();\n        div.css('height', width+\"px\");\n\n        if(!MainPageMapProvider.instance){\n            MainPageMapProvider.instance = new MainPageMapProvider();\n        }\n\n        return MainPageMapProvider.instance\n    }\n\n    public removeMap(){\n        MainPageMapProvider.instance.map.remove()\n        MainPageMapProvider.instance.map = undefined\n        MainPageMapProvider.isLayerAdded = false\n    }\n\n    public addMap(){\n        if(MainPageMapProvider.instance.map === undefined){\n            MainPageMapProvider.instance.map = L.map('mapid').setView([50.265951,  19.616134], 12.1);\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n                attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>'\n            }).addTo(MainPageMapProvider.instance.map);\n        }\n    }\n\n\n    public addPointsToTheMap(stations: Station[]){\n        stations.forEach(station => {\n            L.marker([station.location.lat, station.location.lon]).addTo(MainPageMapProvider.instance.map)\n                .bindPopup(station.name)\n        })\n    }\n\n    public drawLineOfStations(line: Line, color: string){\n        const points:LatLngExpression[] = line.stations.map(station => {\n            return [station.location.lat, station.location.lon]\n        })\n        let polyline = L.polyline(points).addTo(MainPageMapProvider.instance.map)\n        polyline.setStyle({\n            color,\n            weight: 6\n        })\n        MainPageMapProvider.polyLines.push({lineName: line.name, polyLine: polyline})\n    }\n\n    public createLegend(lines: Line[], colors: string[]){\n        // @ts-ignore\n        let legend = L.control({position: 'bottomleft'});\n        legend.onAdd = function(map:any) {\n\n            let div = L.DomUtil.create('div', 'info legend');\n            let labels:string[] = []\n            let upperLaber = '<strong id=\"upper-label\">Linie (Kliknij aby zobaczyć)<i class=\"icon-down-open rotate-icon\"></i></strong>'\n            lines.forEach((line, index) => {\n                labels.push(`\n                    <span class=\"legend-fragment\">\n                        <div class=\"circle-legend\" style=\"background-color: ${colors[index]}\"></div><span>${line.name}: ${line.begin.name} - ${line.end.name}</span>\n                    </span>\n                `)\n\n            })\n\n            div.innerHTML = upperLaber + '<div id=\"labels-container\" class=\"hide-legend\">'+labels.join('<br>')+'</div>' ;\n            return div;\n        };\n        legend.addTo(MainPageMapProvider.instance.map);\n        addFunctionsToLegend()\n        makeLegendDropDown()\n    }\n\n\n}","enum Day{\n    MONDAY,\n    TUESDAY,\n    WEDNESDAY,\n    THURSDAY,\n    FRIDAY,\n    SATURDAY,\n    SUNDAY\n}\n\nexport default Day;","import React, {useEffect} from \"react\";\nimport MainPageMapProvider from \"../../services/mapProviders/mainPageMapProvider\";\nimport './MainPageMap.css'\nimport {useSelector} from \"react-redux\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport Line from \"../../data/classes/Line\";\n\nconst linesColors = [\n    \"red\",\n    \"blue\",\n    \"green\",\n    \"orange\",\n    \"black\"\n]\n\nconst MainPageMap = () => {\n    let map:any;\n    const data = useSelector((state: RootState) => state.data.data)\n\n    useEffect(() => {\n        map = MainPageMapProvider.getInstance()\n        map.addMap();\n        if(data.stations.length > 0){\n            map.addPointsToTheMap(data.stations)\n        }\n        if(data.lines.length > 0){\n            data.lines.forEach((line: Line, index :number) => {\n                map.drawLineOfStations(line, linesColors[index]);\n            })\n            map.createLegend(data.lines, linesColors)\n        }\n        return () => {\n            map.removeMap()\n        }\n    }, [data])\n\n\n    return(\n        <div id=\"mapid\">\n\n        </div>\n    )\n}\n\nexport default MainPageMap;","import React from \"react\";\nimport './MainPage.css'\nimport MainPageMap from \"../MainPageMap/MainPageMap\";\n\nconst MainPage = () => {\n    return(\n        <main data-testid=\"main-page\" className=\"main-page\">\n            <section>\n                <h1 className=\"main-page-title\">Witaj na stronie <i className=\"icon-train\"></i>Sieniczniańskich lini Kolejowych!</h1>\n                <p>\n                    Serwis ten umożliwia sprawdzenie wszystkich dostępnych tras oraz stacji kolejowych,\n                    jak również wyszukiwania tras pomiędzy przystankami\n                </p>\n            </section>\n            <MainPageMap />\n            <footer>\n                Zapraszamy!\n                <div>\n                    <hr />\n                    <p>&copy; 2021 Sieniczniańskie Linie Kolejowe</p>\n                </div>\n\n            </footer>\n        </main>\n    )\n}\n\nexport default MainPage","import React from \"react\";\nimport Select, {ActionMeta} from \"react-select\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport Station from \"../../data/classes/Station\";\nimport {addStation, removeALLStations} from \"../../actions/selectDataActions\";\nimport './FilterStationsByName.css'\n\ntype Option = {\n    label: string,\n    value: string\n}\n\nconst FilterStationsByName = () => {\n\n    const stations: Station[] = useSelector((state: RootState) => state.data.data.stations)\n    const dispatcher = useDispatch()\n\n    const stationOptions = stations.map((station: Station): Option => {\n        return{\n            label: station.name,\n            value: station.id.toString()\n        }\n    })\n\n    const handleOnChange = (option: Option | null) => {\n        if(option !== null){\n            const foundStation = stations.find(station => station.name === option.label);\n            if(foundStation === undefined){\n                throw 'cannot find station with name:'+option.value\n            }\n            dispatcher(removeALLStations());\n            dispatcher(addStation(foundStation));\n        }\n    }\n\n    return(\n        <div className=\"filter-stations-by-name\">\n            <Select options={stationOptions}\n                    placeholder=\"Wybierz nazwę stacji...\"\n                    onChange={handleOnChange}\n            />\n        </div>\n    )\n}\n\nexport default FilterStationsByName;","import React, {useEffect} from \"react\";\nimport Select from \"react-select\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport Line from \"../../data/classes/Line\";\nimport {addAllLines, removeAllLines, removeALLStations} from \"../../actions/selectDataActions\";\nimport './FilterStationsByLines.css'\nimport makeAnimated from 'react-select/animated';\nconst animatedComponents = makeAnimated();\n\ntype Option = {\n    label: string,\n    value: string\n}\n\n\nconst FilterStationsByLines = () => {\n\n    const lines: Line[] = useSelector((state: RootState) => state.data.data.lines)\n    const dispatcher = useDispatch()\n\n    let lineOptions = lines.map((line) => {\n        return {\n            label: `${line.name}: ${line.begin.name} - ${line.end.name}`,\n            value: line.name\n        }\n    })\n\n\n    const handleOnChange = (options: readonly Option[]) => {\n        const foundLines = lines.filter(line => {\n            return options.find(option => option.value === line.name)\n        })\n        dispatcher(removeAllLines());\n        dispatcher(addAllLines(foundLines));\n    }\n\n\n    return(\n        <div className=\"filter-stations-by-line\">\n            <Select\n                    placeholder=\"Wybierz linie, na trasie których jest przystanek...\"\n                    // @ts-ignore\n                    onChange={handleOnChange}\n                    components={animatedComponents}\n                    isMulti\n                    options={lineOptions}\n            />\n\n        </div>\n    )\n}\n\nexport default FilterStationsByLines","import React from \"react\";\nimport FilterStationsByName from \"../FilterStationsByName/FilterStationsByName\";\nimport FilterStationsByLines from \"../FilterStationByLines/FilterStationsByLines\";\nimport './StationFilters.css'\n\nconst StationFilters = () => {\n    return(\n        <div className=\"station-filters\">\n            <FilterStationsByName />\n            <FilterStationsByLines />\n        </div>\n    )\n}\n\nexport default StationFilters;","import Station from \"../../data/classes/Station\";\nimport Line from \"../../data/classes/Line\";\n\nexport class StationsFilter{\n    public static filter(allStations: Station[] ,selectedStations: Station[], selectedLines: Line[]): Station[]{\n        return allStations.filter(station => {\n\n            let foundStation = false\n\n            if(selectedStations.length === 1){\n                if(selectedStations[0].id === station.id){\n                    foundStation = true;\n                }\n            }\n            else{\n                foundStation = true\n            }\n\n\n            let flag = true;\n            selectedLines.forEach((line: Line) => {\n                if(line.stations.find(stationToFind => stationToFind.id === station.id) === undefined){\n                    flag = false\n                }\n            })\n            if(selectedLines.length === 0){\n                flag = true\n            }\n\n            return !(!foundStation || !flag)\n\n\n        })\n    }\n}","import React from \"react\";\nimport Station from \"../../data/classes/Station\";\nimport './StationComponent.css'\nimport {Link, useHistory} from \"react-router-dom\";\n\ntype propsType = {\n    station: Station\n}\n\nconst StationComponent = (props: propsType) => {\n\n    const history = useHistory();\n\n    const handleClick = () => {\n        history.push('/przystanki/'+props.station.id)\n    }\n\n    return(\n        <div className=\"station-component\" onClick={handleClick}>\n            <i className=\"icon-home\"></i>\n            <span>{props.station.name}</span>\n        </div>\n    )\n}\n\nexport default StationComponent;","import React from \"react\";\nimport './StationsChoosing.css'\nimport {useSelector} from \"react-redux\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport {StationsFilter} from \"../../services/filters/StationsFilter\";\nimport Station from \"../../data/classes/Station\";\nimport Line from \"../../data/classes/Line\";\nimport StationComponent from \"../StationComponent/StationComponent\";\n\nconst StationChoosing = () => {\n\n    const stations = useSelector((state: RootState) => state.data.data.stations);\n    const selectedStations:Station[] = useSelector((state:any) => state.selectedData.selectedStations)\n    const selectedLines: Line[] = useSelector((state: any) => state.selectedData.selectedLines)\n\n    const filteredStations = StationsFilter.filter(stations, selectedStations, selectedLines);\n    filteredStations.sort((a, b) => (a.name > b.name) ? 1 : -1)\n\n    const stationComponents = filteredStations.map(station => <StationComponent key={station.name} station={station} />)\n\n    return(\n        <div className=\"stations-choosing\">\n            <section>\n                <h2>Znalezione stacje:</h2>\n                <div className=\"stations-container\">\n                    {stationComponents}\n                </div>\n            </section>\n        </div>\n    )\n}\n\nexport default StationChoosing;","import React, {useEffect} from \"react\";\nimport StationFilters from \"../StationFilters/StationFilters\";\nimport './TrainStationWrapper.css'\nimport StationChoosing from \"../StationChoosing/StationChoosing\";\nimport {removeAllLines, removeALLStations} from \"../../actions/selectDataActions\";\nimport {useDispatch} from \"react-redux\";\n\nconst TrainStationWrapper = () => {\n\n    const dispatcher = useDispatch();\n\n    useEffect(() => {\n        return () => {\n            dispatcher(removeAllLines())\n            dispatcher(removeALLStations())\n        }\n    })\n\n    return(\n        <div data-testid=\"train-station-wrapper\" className=\"train-station-wrapper\">\n            <StationFilters />\n            <StationChoosing />\n        </div>\n    )\n}\n\nexport default TrainStationWrapper","import React from 'react'\nimport './LineFilterByName.css'\nimport Station from \"../../data/classes/Station\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport {addLine, addStation, removeAllLines, removeALLStations} from \"../../actions/selectDataActions\";\nimport Line from \"../../data/classes/Line\";\nimport Select from \"react-select\";\n\ntype Option = {\n    label: string,\n    value: string\n}\n\nconst LineFilterByName = () => {\n\n    const lines: Line[] = useSelector((state: RootState) => state.data.data.lines)\n    const dispatcher = useDispatch()\n\n    const linesOptions = lines.map((line: Line): Option => {\n        return{\n            label: line.name,\n            value: line.name\n        }\n    })\n\n    const handleOnChange = (option: Option | null) => {\n        if(option !== null){\n            const foundLine = lines.find(line => line.name === option.label);\n            if(foundLine === undefined){\n                throw 'cannot find station with name:'+option.value\n            }\n            dispatcher(removeAllLines());\n            dispatcher(addLine(foundLine));\n        }\n    }\n\n    return(\n        <div className=\"filter-lines-by-name\">\n            <Select options={linesOptions}\n                    placeholder=\"Wybierz nazwę linii...\"\n                    onChange={handleOnChange}\n            />\n        </div>\n    )\n}\n\nexport default LineFilterByName;","import React from \"react\";\nimport './LineFiltersByStations.css'\nimport Select from \"react-select\";\nimport makeAnimated from \"react-select/animated\";\nimport {addAllLines, addAllStations, removeAllLines, removeALLStations} from \"../../actions/selectDataActions\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport Line from \"../../data/classes/Line\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport Station from \"../../data/classes/Station\";\n\nconst animatedComponents = makeAnimated();\n\ntype Option = {\n    label: string,\n    value: number\n}\n\nconst LineFilterByStations = () => {\n\n    const dispatcher = useDispatch()\n    const stations: Station[] = useSelector((state: RootState) => state.data.data.stations)\n\n    const handleOnChange = (options: readonly Option[]) => {\n        const foundStations = stations.filter(station => {\n            return options.find(option => option.value === station.id)\n        })\n        dispatcher(removeALLStations());\n        dispatcher(addAllStations(foundStations));\n    }\n\n    const stationOptions = stations.map((station):Option => {\n        return{\n            label: station.name,\n            value: station.id\n        }\n    })\n\n    return(\n        <div className=\"filter-lines-by-stations\">\n            <Select\n                placeholder=\"Wybierz stacje, przez które przechodzić ma linia...\"\n                // @ts-ignore\n                onChange={handleOnChange}\n                components={animatedComponents}\n                isMulti\n                options={stationOptions}\n            />\n        </div>\n    )\n}\n\nexport default LineFilterByStations;","import React from \"react\";\nimport LineFilterByName from \"../LineFilterByName/LineFilterByName\";\nimport LineFilterByStations from \"../LineFilterByStations/LineFilterByStations\";\nimport './LineFilters.css'\n\nconst LineFilters = () => {\n    return(\n        <div className=\"lines-choosing\">\n            <LineFilterByName />\n            <LineFilterByStations />\n        </div>\n    )\n}\n\nexport default LineFilters;","import Line from \"../../../data/classes/Line\";\nimport Station from \"../../../data/classes/Station\";\n\nexport class LinesFilter{\n    public static filter(allLines: Line[], selectedStations: Station[], selectedLines: Line[]): Line[]{\n        return allLines.filter(line => {\n            let foundLine = false\n\n            if(selectedLines.length === 1){\n                if(selectedLines[0].name === line.name){\n                    foundLine = true;\n                }\n            }\n            else{\n                foundLine = true\n            }\n\n            let stationsMatch = true;\n\n            selectedStations.forEach(station => {\n                if(line.stations.find(stationToFind => stationToFind.id === station.id) === undefined){\n                    stationsMatch = false\n                }\n            })\n\n            if(selectedStations.length === 0){\n                stationsMatch = true\n            }\n\n            return !(!foundLine || !stationsMatch)\n\n        })\n    }\n}","import React from \"react\";\nimport './LineComponent.css'\nimport Line from \"../../data/classes/Line\";\nimport {useHistory} from \"react-router-dom\";\n\ntype propsType = {\n    line: Line\n}\n\nconst LineComponent = (props:propsType) => {\n\n    const history = useHistory()\n\n    const handleClick = () => {\n        history.push('/linie/'+props.line.name)\n    }\n\n    return(\n        <div className=\"line-component\" onClick={handleClick}>\n            <i className=\"icon-train\"></i>\n            <span>{props.line.name}</span>\n        </div>\n    )\n}\n\nexport default LineComponent;","import React from \"react\";\nimport './LinesChoosing.css'\nimport {useSelector} from \"react-redux\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport Station from \"../../data/classes/Station\";\nimport Line from \"../../data/classes/Line\";\nimport {LinesFilter} from \"../../services/filters/LinesFilter/LinesFilter\";\nimport LineComponent from \"../LineComponent/LineComponent\";\n\nconst LinesChoosing = () => {\n\n    const lines: Line[] = useSelector((state: RootState) => state.data.data.lines);\n    const selectedStations:Station[] = useSelector((state:any) => state.selectedData.selectedStations)\n    const selectedLines: Line[] = useSelector((state: any) => state.selectedData.selectedLines)\n\n    const filteredLines = LinesFilter.filter(lines, selectedStations, selectedLines);\n    filteredLines.sort((a, b) => (a.name > b.name) ? 1 : -1)\n\n    const lineComponents = filteredLines.map(line => <LineComponent key={line.name} line={line} />)\n\n    return(\n        <div className=\"lines-wrapper\">\n            <section>\n                <h2>Znalezione linie:</h2>\n                <div className=\"lines-inner-container\">\n                    {lineComponents}\n                </div>\n            </section>\n        </div>\n    )\n}\n\nexport default LinesChoosing;","import React, {useEffect} from \"react\";\nimport './TrainChoosingWrapper.css'\nimport LineFilters from \"../LineFilters/LineFilters\";\nimport {useDispatch} from \"react-redux\";\nimport {removeAllLines, removeALLStations} from \"../../actions/selectDataActions\";\nimport LinesChoosing from \"../LinesChoosing/LinesChoosing\";\n\nconst TrainChoosingWrapper = () => {\n\n    const dispatcher = useDispatch();\n\n    useEffect(() => {\n        return () => {\n            dispatcher(removeAllLines())\n            dispatcher(removeALLStations())\n        }\n    })\n\n    return(\n        <div data-testid=\"train-choosing-wrapper\" className=\"train-choosing-wrapper\">\n            <LineFilters />\n            <LinesChoosing />\n        </div>\n    )\n}\n\nexport default TrainChoosingWrapper;","import React from 'react'\nimport Select from \"react-select\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport Station from \"../../data/classes/Station\";\nimport './ChooseStationsForConnection.css'\n\ntype propsType = {\n    removeAction: any\n    addAction: any,\n    placeholder: string,\n    propName: string\n}\n\ntype Option = {\n    label: string,\n    value: string\n}\n\n\nconst ChooseStationsForConnection = (props: propsType) => {\n\n    const dispatcher = useDispatch()\n    const stations: Station[] = useSelector((state:RootState) => state.data.data.stations);\n    //@ts-ignore\n    const currentStation: Station | null = useSelector((state:RootState) => state.connection[props.propName]);\n    const stationsOptions = stations.map((station: Station): Option => ({\n        value: station.id.toString(),\n        label: station.name\n    }))\n    const currentValue: Option | null = currentStation === null ? null : {label: currentStation.name, value: currentStation.id.toString()}\n\n    const handleChange = (option: Option | null) => {\n        if(option !== null){\n            const station: Station|undefined = stations.find(station => station.id.toString() === option.value)\n            if(station === undefined){\n                throw 'Cannot find station with id: '+option.value+\" and name: \"+option.label\n            }\n            dispatcher(props.removeAction());\n            dispatcher(props.addAction(station))\n        }\n    }\n\n    return(\n        <div className=\"station-for-connection-choosing\">\n            <Select\n                options={stationsOptions}\n                placeholder={props.placeholder}\n                onChange={handleChange}\n                value={currentValue}\n            />\n        </div>\n\n    )\n}\n\nexport default ChooseStationsForConnection;","import React, {useEffect} from \"react\";\nimport ChooseStationsForConnection from \"../ChooseStationsForConnection/ChooseStationsForConnection\";\nimport {\n    addBeginStation, addDepartureTime,\n    addEndStation,\n    removeBeginStation, removeDepartureTime,\n    removeEndStation\n} from \"../../actions/connectionDataActions\";\nimport './ConnectionsDataChoosing.css'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport Station from \"../../data/classes/Station\";\nimport {DatePicker, MuiPickersUtilsProvider, TimePicker} from \"@material-ui/pickers\";\nimport DateFnsUtils from '@date-io/date-fns';\nimport {pl} from 'date-fns/locale'\nimport {MaterialUiPickersDate} from \"@material-ui/pickers/typings/date\";\nimport {removeALLPaths, resetMaxPaths, resetNextConnectionTime} from \"../../actions/pathsActions\";\n\n\n\nconst ConnectionsDataChoosing = () => {\n\n    const dispatcher = useDispatch();\n    const beginStation: Station = useSelector((state:RootState) => state.connection.beginStation)\n    const endStation: Station = useSelector((state:RootState) => state.connection.endStation)\n    const departureTime: Date = useSelector((state: RootState) => state.connection.departureTime);\n\n    useEffect(() => {\n        if(departureTime === null){\n            dispatcher(addDepartureTime(new Date()));\n        }\n        return () => {\n            dispatcher(removeBeginStation())\n            dispatcher(removeDepartureTime());\n            dispatcher(removeEndStation());\n        }\n    }, [])\n\n    const handleExchangeClick = () => {\n        dispatcher(removeBeginStation());\n        dispatcher(removeEndStation());\n        dispatcher(addBeginStation(endStation));\n        dispatcher(addEndStation(beginStation));\n        dispatcher(removeALLPaths())\n        dispatcher(resetMaxPaths())\n        dispatcher(resetNextConnectionTime())\n    }\n\n    const handleDateChange = (dateFromPicker: MaterialUiPickersDate) => {\n        if(dateFromPicker !== null){\n            dispatcher(removeDepartureTime())\n            dispatcher(addDepartureTime(dateFromPicker));\n            dispatcher(removeALLPaths())\n            dispatcher(resetMaxPaths())\n            dispatcher(resetNextConnectionTime())\n        }\n\n    }\n\n    return(\n        <div className=\"connections-data-choosing\">\n            <ChooseStationsForConnection\n                removeAction={removeBeginStation}\n                addAction={addBeginStation}\n                placeholder={\"Wybierz stację początkową...\"}\n                propName={\"beginStation\"}\n            />\n            <div className=\"exchange-div\" onClick={handleExchangeClick}>\n                <i className=\"icon-exchange\"></i>\n            </div>\n            <ChooseStationsForConnection\n                removeAction={removeEndStation}\n                addAction={addEndStation}\n                placeholder={\"Wybierz stację końcową...\"}\n                propName={\"endStation\"}\n            />\n            <div className=\"departure-time-pickers\">\n                <div>\n                    <MuiPickersUtilsProvider utils={DateFnsUtils} locale={pl}>\n                        <DatePicker value={departureTime}\n                                    label=\"Wybierz dzień\"\n                                    onChange={handleDateChange}/>\n                    </MuiPickersUtilsProvider>\n                </div>\n                <div>\n                    <MuiPickersUtilsProvider utils={DateFnsUtils} locale={pl}>\n                        <TimePicker value={departureTime}\n                                    label=\"Wybierz godzinę\"\n                                    ampm={false}\n                                    onChange={handleDateChange}\n                        />\n                    </MuiPickersUtilsProvider>\n                </div>\n            </div>\n\n\n\n        </div>\n    )\n}\n\nexport default ConnectionsDataChoosing;","import Day from \"../enums/Day\";\nimport WeekDateConverter from \"../../services/WeekDateConverter/WeekDateConverter\";\n\nexport default class WeekDate {\n\n    get seconds(): number {\n        return this._seconds;\n    }\n\n    get weekDay(): Day {\n        return this._weekDay;\n    }\n\n    get hours(): number {\n        return this._hours;\n    }\n\n    get minutes(): number {\n        return this._minutes;\n    }\n\n    public hoursString():string{\n        return this._hours < 10 ? \"0\"+this._hours : this._hours.toString()\n    }\n\n    public minutesString():string{\n        return this._minutes < 10 ? \"0\"+this._minutes : this._minutes.toString()\n    }\n\n    public secondsString():string{\n        return this._seconds < 10 ? \"0\"+this._seconds : this._seconds.toString()\n    }\n\n    convertToSeconds(){\n        const weekDateConverter = new WeekDateConverter();\n        return weekDateConverter.convertToSeconds(this);\n    }\n\n    addTime(seconds: number){\n        const weekDateConverter = new WeekDateConverter();\n        const newWeekDate = weekDateConverter.convert(weekDateConverter.convertToSeconds(this) + seconds);\n        this._hours = newWeekDate.hours;\n        this._seconds = newWeekDate.seconds;\n        this._weekDay = newWeekDate.weekDay;\n        this._minutes = newWeekDate.minutes\n    }\n\n    constructor(weekDay: Day, hours: number, minutes: number, seconds: number) {\n        this._weekDay = weekDay;\n        this._hours = hours;\n        this._minutes = minutes;\n        this._seconds = seconds;\n    }\n\n    private _seconds: number;\n    private _weekDay: Day;\n    private _hours: number;\n    private _minutes: number;\n}","import Day from \"../../data/enums/Day\";\nimport WeekDate from \"../../data/classes/WeekDate\";\n\nexport default class WeekDateConverter{\n\n    convert(seconds: number): WeekDate{\n        seconds %= 604800\n        let day:Day;\n        switch (Math.trunc(seconds / 86400)){\n            case 0:\n                day = Day.MONDAY;\n                break;\n            case 1:\n                day = Day.TUESDAY\n                break;\n            case 2:\n                day = Day.WEDNESDAY\n                break;\n            case 3:\n                day = Day.THURSDAY\n                break;\n            case 4:\n                day = Day.FRIDAY\n                break;\n            case 5:\n                day = Day.SATURDAY\n                break;\n            case 6:\n                day = Day.SUNDAY\n                break;\n            default:\n                day = Day.MONDAY\n        }\n        const hours: number = Math.trunc(( seconds % 86400 ) / 3600);\n        const minutes: number = Math.trunc((( seconds % 86400 ) % 3600 ) / 60)\n        const secondsComputed: number = Math.trunc(((( seconds % 86400 ) % 3600 ) % 60))\n\n        return new WeekDate(day, hours, minutes, secondsComputed)\n    }\n\n    convertFromDate(date: Date): WeekDate{\n        const seconds = date.getSeconds();\n        const minutes = date.getMinutes();\n        const hours = date.getHours();\n        const weekDay = (date.getDay() - 1) === -1 ? 6 : date.getDay() - 1;\n        return new WeekDate(weekDay,hours,minutes,seconds);\n    }\n\n    addToTheDate(date: Date, weekDate: WeekDate){\n        const currentTime = this.convertFromDate(date).convertToSeconds()\n        console.log(currentTime)\n        console.log(weekDate.convertToSeconds())\n        let movement = weekDate.convertToSeconds() - currentTime\n        if(movement < 0){\n            movement *= -1\n        }\n        return new Date(date.getTime() + movement*1000)\n    }\n\n    convertToSeconds(weekDate: WeekDate|undefined){\n        if(weekDate === undefined){\n            return Infinity;\n        }\n        switch (weekDate.weekDay){\n            case Day.MONDAY:\n                return 86400*0 + weekDate.hours * 3600 + weekDate.minutes * 60 + weekDate.seconds\n            case Day.TUESDAY:\n                return 86400*1 + weekDate.hours * 3600 + weekDate.minutes * 60 + weekDate.seconds\n            case Day.WEDNESDAY:\n                return 86400*2 + weekDate.hours * 3600 + weekDate.minutes * 60 + weekDate.seconds\n            case Day.THURSDAY:\n                return 86400*3 + weekDate.hours * 3600 + weekDate.minutes * 60 + weekDate.seconds\n            case Day.FRIDAY:\n                return 86400*4 + weekDate.hours * 3600 + weekDate.minutes * 60 + weekDate.seconds\n            case Day.SATURDAY:\n                return 86400*5 + weekDate.hours * 3600 + weekDate.minutes * 60 + weekDate.seconds\n            case Day.SUNDAY:\n                return 86400*6 + weekDate.hours * 3600 + weekDate.minutes * 60 + weekDate.seconds\n            default:\n                return -1\n        }\n    }\n\n    getPolishNameOfTheWeekDay(day: Day){\n        switch (day) {\n            case Day.MONDAY:\n                return 'Poniedziałek'\n            case Day.TUESDAY:\n                return 'Wtorek'\n            case Day.WEDNESDAY:\n                return 'Środa'\n            case Day.THURSDAY:\n                return 'Czwartek'\n            case Day.FRIDAY:\n                return 'Piątek'\n            case Day.SATURDAY:\n                return 'Sobota'\n            case Day.SUNDAY:\n                return 'Niedziela'\n        }\n    }\n\n}","import Station from \"./Station\";\nimport Line from \"./Line\";\nimport GraphEdge from \"./GraphEdge\";\nimport WeekDate from \"./WeekDate\";\nimport Node from \"./Node\";\n\nexport default class GraphNode extends Node{\n    private _line: Line|undefined;\n    private _weekDate: WeekDate|undefined;\n    private _previous_node: GraphNode|undefined;\n    private readonly _reversed: boolean\n\n    public toString(){\n        const line = this._line !== undefined ? this._line.name : \"currentLine\"\n        return this.station.name+line+this.reversed\n    }\n\n    constructor(station: Station, line: Line|undefined, visited: boolean, reversed: boolean) {\n        super(visited, station);\n        this._line = line;\n        this._reversed = reversed;\n    }\n\n    getTime(): number{\n        if(this.weekDate === undefined){\n            return Infinity\n        }\n        else{\n            return this.weekDate.convertToSeconds()\n        }\n    }\n\n    get previous_node(): GraphNode | undefined {\n        return this._previous_node;\n    }\n\n    set previous_node(value: GraphNode | undefined) {\n        this._previous_node = value;\n    }\n\n    get weekDate(): WeekDate|undefined {\n        return this._weekDate;\n    }\n\n    set weekDate(value: WeekDate|undefined) {\n        this._weekDate = value;\n    }\n\n    get reversed(): boolean{\n        return this._reversed\n    }\n\n    get line(): Line {\n        if(this._line === undefined){\n            throw 'line is undefined'\n        }\n        else{\n            return this._line;\n        }\n\n    }\n\n    set line(value: Line) {\n        this._line = value;\n    }\n\n    public addNeighbour(edge: GraphEdge){\n        this._neighbours.push(edge);\n    }\n\n}","import GraphEdge from \"./GraphEdge\";\nimport Station from \"./Station\";\n\nexport default class Node{\n    private _visited: boolean;\n    protected _neighbours:GraphEdge[] = [];\n    private _station: Station;\n\n\n    get station(): Station {\n        return this._station;\n    }\n\n    set station(value: Station) {\n        this._station = value;\n    }\n\n    get visited(): boolean {\n        return this._visited;\n    }\n\n    set visited(value: boolean) {\n        this._visited = value;\n    }\n\n    get neighbours(): GraphEdge[] {\n        return this._neighbours;\n    }\n\n    set neighbours(value: GraphEdge[]) {\n        this._neighbours = value;\n    }\n\n    constructor(visited: boolean, station: Station) {\n        this._visited = visited;\n        this._station = station;\n    }\n}","import GraphNode from \"./GraphNode\";\nimport Node from \"./Node\";\n\nexport default class GraphEdge{\n    private _cost: number|undefined = undefined;\n    private readonly _destination: GraphNode;\n    private readonly _source: GraphNode;\n\n\n    constructor(destination: GraphNode, source: GraphNode) {\n        this._destination = destination;\n        this._source = source;\n    }\n\n    get cost(): number|undefined {\n        return this._cost;\n    }\n\n    set cost(value: number|undefined) {\n        this._cost = value;\n    }\n\n    get destination(): GraphNode {\n        return this._destination;\n    }\n\n    get source(): GraphNode {\n        return this._source;\n    }\n}","type location = {\n    lon: number,\n    lat: number\n}\n\n\nexport class DistanceComputer{\n    public static computeDistance(point1:location, point2: location): number{\n        const planetR = 6371000;\n        const result =  Math.trunc(Math.acos(\n            Math.sin(this.degreesToRadians(point1.lat))*\n            Math.sin(this.degreesToRadians(point2.lat))+\n            Math.cos(this.degreesToRadians(point1.lat))*\n            Math.cos(this.degreesToRadians(point2.lat))*\n            Math.cos(this.degreesToRadians(point1.lon - point2.lon))\n        )*planetR);\n        return result;\n    }\n\n    private static degreesToRadians(degrees:number){\n        let pi = Math.PI;\n        return degrees * (pi/180);\n    }\n}","import {DistanceComputer} from \"./DistanceComputer\";\nimport Station from \"../../data/classes/Station\";\nimport Line from \"../../data/classes/Line\";\nimport WeekDate from \"../../data/classes/WeekDate\";\nimport WeekDateConverter from \"../WeekDateConverter/WeekDateConverter\";\n\ntype location = {\n    lon: number,\n    lat: number\n}\n\nexport default class TrainTimeComputer{\n\n    public static getTimeOfTheNextTrain(currentTime: WeekDate,station: Station, line: Line, reversed: boolean, speed: number){\n        const weekDateConverter = new WeekDateConverter();\n        const stationIndex = line.stations.indexOf(station);\n        const stationToCurrentStation = reversed ?\n            line.stations.concat(line.stations.slice(stationIndex, line.stations.length - 1).reverse()) :\n            line.stations.slice(0, stationIndex + 1)\n        const departuresTime = line.time.map(time => {\n            return weekDateConverter.convertToSeconds(time) + TrainTimeComputer.computeTimeBetweenStationsChain(stationToCurrentStation, speed)\n        })\n        departuresTime.sort((a,b)=> a - b);\n        const currentTimeInSeconds = weekDateConverter.convertToSeconds(currentTime)\n        const biggerTime = departuresTime.find(time => time > currentTimeInSeconds);\n        if(biggerTime === undefined){\n            return departuresTime[0]\n        }\n        else return biggerTime % 604800\n\n    }\n\n    public static computeTime(point1: location, point2:location, speed: number):number{\n        const result =  Math.trunc(DistanceComputer.computeDistance(point1, point2)/this.kmhToMs(speed));\n        return result\n    }\n\n    public static computeTimeBetweenStationsChain(stations: Station[], speed: number): number{\n        let result = 0;\n        for(let i = 0; i < stations.length - 1; i++){\n            result += this.computeTime(stations[i].location, stations[i+1].location, speed) + 30;\n        }\n        return result;\n    }\n\n    private static kmhToMs(speed: number){\n        return speed / 3.6\n    }\n\n}","export class PriorityQueue<T extends Object>{\n\n    // (a: child, b: parent)\n    private readonly _comparator: (a: T, b: T) => boolean;\n    private _queue: T[] = [];\n    private heapMap: any = {}\n    \n    public indexOf(n: T){\n        const result = this.heapMap[n.toString()];\n        return result\n    }\n\n    public size(){\n        return this._queue.length;\n    }\n\n    public getQueueCopy(){\n        const copy:T[] = []\n        this._queue.forEach(e => {\n            copy.push(e)\n        })\n        return copy\n    }\n\n    public isHeap(i: number): boolean{\n        if(!this.isLeaf(i)){\n            if(this._comparator(this._queue[this.left(i)], this._queue[i])){\n                return false;\n            }\n            if(this._comparator(this._queue[this.right(i)], this._queue[i])){\n                return false;\n            }\n            return this.isHeap(this.right(i)) && this.isHeap(this.left(i));\n        }\n        else{\n            return true\n        }\n\n    }\n\n    private left(index: number){\n        return index * 2 + 1\n    }\n\n    private right(index: number){\n        return index * 2 + 2;\n    }\n\n    private parent(index: number){\n        return Math.trunc((index - 1) / 2)\n    }\n\n    private hasLeft(index: number){\n        return 2 * index + 1 < this._queue.length;\n    }\n\n    private hasRight(index: number){\n        return 2 * index + 2 < this._queue.length;\n    }\n\n    private isLeaf(index: number){\n        return 2 * index + 2 > this._queue.length;\n    }\n\n    private heapCondition(i: number){\n        let result = i;\n        if(this.hasLeft(i) && this._comparator(this._queue[this.left(i)], this._queue[result])){\n            result = this.left(i);\n        }\n        if(this.hasRight(i) && this._comparator(this._queue[this.right(i)], this._queue[result])){\n            result = this.right(i);\n        }\n        return result;\n    }\n\n    constructor(comparator: (a: T, b: T) => boolean) {\n        this._comparator = comparator;\n    }\n\n    public push(n: T){\n        this._queue.push(n);\n        this.heapMap[n.toString()] = this._queue.length - 1\n        this.repairHeap(this._queue.length - 1)\n    }\n\n    public repairHeap(index: number) {\n        let biggest = this.heapCondition(index)\n        while(!this.isLeaf(index) && biggest !== index){\n            [this._queue[biggest], this._queue[index]] = [this._queue[index], this._queue[biggest]];\n            this.heapMap[this._queue[biggest].toString()] = index;\n            this.heapMap[this._queue[index].toString()] = biggest;\n            index = biggest;\n            biggest = this.heapCondition(index);\n        }\n        while(index > 0 && index < this._queue.length && this._comparator(this._queue[index],this._queue[this.parent(index)])){\n            [this._queue[this.parent(index)], this._queue[index]] = [this._queue[index], this._queue[this.parent(index)]];\n            this.heapMap[this._queue[this.parent(index)].toString()] = index;\n            this.heapMap[this._queue[index].toString()] = this.parent(index);\n            index = this.parent(index);\n        }\n    }\n\n\n\n    public pop(){\n        if(this.size() === 0){\n            throw 'the queue is empty'\n        }\n        const result = this._queue[0];\n        this._queue[0] = this._queue[this.size() - 1];\n        this.heapMap[this._queue[0].toString()] = 0\n        delete this.heapMap[this._queue.length - 1]\n        this._queue.pop();\n        this.repairHeap(0)\n        return result;\n    }\n\n\n}","import Line from \"./Line\";\nimport WeekDate from \"./WeekDate\";\nimport GraphNode from \"./GraphNode\";\nimport GraphEdge from \"./GraphEdge\";\nimport Station from \"./Station\";\nimport WeekDateConverter from \"../../services/WeekDateConverter/WeekDateConverter\";\nimport TrainTimeComputer from \"../../services/trainTimeComputer/TrainTimeComputer\";\nimport {PriorityQueue} from \"./PriorityQueue\";\n\nexport default class Graph{\n    private readonly _lines: Line[];\n    private readonly _time: WeekDate;\n    private beginStation: Station|undefined = undefined;\n    private destinationStation: Station|undefined = undefined;\n    private _nodes: GraphNode[] = [];\n    private speed: number;\n\n    get lines(): Line[] {\n        return this._lines;\n    }\n\n    get time(): WeekDate {\n        return this._time;\n    }\n\n    get nodes(): GraphNode[] {\n        return this._nodes;\n    }\n\n    constructor(lines: Line[], time: WeekDate, speed: number) {\n        this._lines = lines;\n        this._time = time;\n        this.speed = speed;\n        this.createNodes()\n    }\n\n    private createNodes() {\n        const nodes: GraphNode[] = this.lines.map(line => {\n            return line.stations.map(station => {\n                return [new GraphNode(station, line, false, false), new GraphNode(station, line, false, true)];\n            }).flat(1)\n        }).flat(1).sort((a, b) => a.station.id - b.station.id)\n        //add connection between same stations, but different direction/line\n        let sameStationNodes: GraphNode[] = []\n        for (let i = 0; i <= nodes.length; i++) {\n            if (i > 0 && (i === nodes.length || (nodes[i].station.id !== nodes[i - 1].station.id))) {\n                sameStationNodes.forEach((nodeFirstIter, firstIndex) => {\n                    sameStationNodes.forEach((nodeSecondIter, secondIndex) => {\n                        if(secondIndex > firstIndex){\n                            const edge1: GraphEdge = new GraphEdge(nodeFirstIter, nodeSecondIter);\n                            const edge2: GraphEdge = new GraphEdge(nodeSecondIter, nodeFirstIter);\n                            nodeSecondIter.addNeighbour(edge1);\n                            nodeFirstIter.addNeighbour(edge2);\n                        }\n                    })\n                })\n                sameStationNodes = []\n            }\n            sameStationNodes.push(nodes[i])\n        }\n        nodes.sort((a, b) => a.station.stationNumber(a.line) - b.station.stationNumber(b.line))\n            .sort((a, b) => (a.line.name > b.line.name) ? 1: (b.line.name > a.line.name ? -1: 0))\n        //add connections between stations on the same line\n        for(let index = 0; index < nodes.length; index+=2){\n            if(index < nodes.length - 2 && nodes[index].line.name === nodes[index + 2].line.name){\n                const edge2: GraphEdge = new GraphEdge(nodes[index + 2], nodes[index]);\n                nodes[index].addNeighbour(edge2);\n            }\n        }\n        for(let index = nodes.length - 1; index >= 2;index -= 2){\n            if(nodes[index].line.name === nodes[index - 2].line.name){\n                const edge2: GraphEdge = new GraphEdge(nodes[index - 2], nodes[index]);\n                nodes[index].addNeighbour(edge2);\n            }\n        }\n        this._nodes = nodes;\n    }\n\n    setDestinationAndBeginning(begin: Station, end: Station){\n        this.beginStation = begin;\n        this.destinationStation = end;\n    }\n\n    private loadBeginNeighbours(graphNode: GraphNode){\n        const filteredNodes = this._nodes.filter(node => node.station.name === graphNode.station.name);\n        graphNode.neighbours = filteredNodes.map(node => new GraphEdge(node, graphNode));\n    }\n\n    computeBestTime(){\n        if(this.destinationStation !== undefined && this.beginStation !== undefined) {\n            const weekDateConverter = new WeekDateConverter();\n            this._nodes.forEach(node => {\n                node.previous_node = undefined;\n                node.weekDate = undefined;\n                node.visited = false;\n            })\n            const firstNode = new GraphNode(this.beginStation, undefined,false, false);\n            firstNode.weekDate = this._time\n            this.loadBeginNeighbours(firstNode);\n            const queue = new PriorityQueue<GraphNode>((a,b)=>a.getTime() < b.getTime())\n            queue.push(firstNode);\n            this._nodes.forEach(node => {\n                queue.push(node);\n            })\n            while (queue.size() > 0){\n                const node = queue.pop();\n                node.neighbours.forEach(neighbour => {\n                    const {destination} = neighbour\n                    if(!destination.visited){\n                        const currentCost = destination.getTime();\n                        const predictedCost = TrainTimeComputer.getTimeOfTheNextTrain(weekDateConverter.convert(node.getTime()), destination.station,destination.line,destination.reversed,this.speed);\n                        if(currentCost > predictedCost){\n                            destination.weekDate = weekDateConverter.convert(predictedCost);\n                            destination.previous_node = node;\n                            queue.repairHeap(queue.indexOf(destination));\n                        }\n                    }\n                })\n                node.visited = true\n            }\n        }\n    }\n\n    getFastestPath(): GraphNode[]{\n        const dest = this._nodes.filter(node => node.station.name === this.destinationStation?.name && node.weekDate !== undefined)\n        dest.sort((a,b) => a.getTime() - b.getTime())\n        let currentStation = dest[0];\n        const result: GraphNode[] = []\n        result.push(currentStation)\n        while(currentStation.station !== this.beginStation){\n            if(currentStation.previous_node !== undefined){\n                currentStation = currentStation.previous_node\n            }\n            result.push(currentStation)\n        }\n        return result;\n    }\n}","import React from \"react\";\nimport Station from \"../../data/classes/Station\";\nimport Line from \"../../data/classes/Line\";\nimport WeekDateConverter from \"../../services/WeekDateConverter/WeekDateConverter\";\nimport './Connection.css'\nimport LineComponent from \"../LineComponent/LineComponent\";\nimport {useHistory} from \"react-router-dom\";\n\ntype propsType = {\n    path: [\n        {\n            station: Station,\n            line: Line,\n            time: number,\n            reverse: boolean\n        }\n    ]\n}\n\nconst Connection = (props:propsType) => {\n\n    const weekDateConverter = new WeekDateConverter();\n    const beginTime = weekDateConverter.convert(props.path[0].time)\n    const arriveTime = weekDateConverter.convert(props.path[props.path.length - 1].time)\n\n    let lines = []\n    props.path.forEach((p, index) => {\n        if(index > 0 && p.line.name !== props.path[index - 1].line.name){\n            lines.push(<LineComponent key={props.path[index - 1].line.name+\"connection\"+Math.random().toString()} line={props.path[index - 1].line}/>)\n        }\n    })\n    lines.push(<LineComponent line={props.path[props.path.length - 1].line}/>)\n\n    const history = useHistory()\n\n    const handleClickOnConnection = () => {\n        let connectionURL = \"/connection/\"\n        props.path.forEach((p,i) => {\n            connectionURL += `${p.line.name}-${p.station.id}-${p.time}-${p.reverse}`\n            if(i !== props.path.length - 1){\n                connectionURL += '-'\n            }\n        })\n        history.push(connectionURL);\n    }\n\n    return(\n        <div className=\"connection\" onClick={handleClickOnConnection}>\n            <div className=\"departure-time-div\">{beginTime.hoursString()+\":\"+beginTime.minutesString()}</div>\n            <i className=\"icon-right-thin\"></i>\n            <div className=\"arrive-time-div\">{arriveTime.hoursString()+\":\"+arriveTime.minutesString()}</div>\n            <div>\n                {lines}\n            </div>\n\n        </div>\n    )\n}\n\nexport default Connection;","import React, {useEffect} from \"react\";\nimport Station from \"../../data/classes/Station\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport Line from \"../../data/classes/Line\";\nimport WeekDateConverter from \"../../services/WeekDateConverter/WeekDateConverter\";\nimport Graph from \"../../data/classes/Graph\";\nimport Connection from \"../Connection/Connection\";\nimport {\n    addNextConnectionTime,\n    addPath,\n    increaseMaxPaths,\n    removeALLPaths,\n    resetMaxPaths, resetNextConnectionTime\n} from \"../../actions/pathsActions\";\nimport './ConnectionsWrapper.css'\nimport WeekDate from \"../../data/classes/WeekDate\";\nimport $ from 'jquery'\n\nconst ConnectionsWrapper = () => {\n\n    const beginStation: Station = useSelector((state: RootState) => state.connection.beginStation);\n    const endStation: Station = useSelector((state: RootState) => state.connection.endStation);\n    const departureTime: Date = useSelector((state: RootState) => state.connection.departureTime);\n    const lines: Line[] = useSelector((state: RootState) => state.data.data.lines);\n    const speed: number = useSelector((state: RootState) => state.data.data.speed);\n    // @ts-ignore\n    const paths: any[] = useSelector((state: RootState) => state.path.paths);\n    // @ts-ignore\n    const maxPaths: number = useSelector((state: RootState) => state.path.maxPaths);\n    // @ts-ignore\n    let nextConnectionTime: WeekDate = useSelector((state: RootState) => state.path.nextConnectionTime)\n    const dispatcher = useDispatch()\n\n    const weekDateConverter = new WeekDateConverter()\n\n    useEffect(() => {\n        $(window).scroll(function() {\n            // @ts-ignore\n            if($(window).scrollTop() + $(window).height() == $(document).height()) {\n                dispatcher(increaseMaxPaths(3));\n                handleLoadMore()\n            }\n        });\n        return () => {\n            dispatcher(removeALLPaths())\n            dispatcher(resetMaxPaths())\n            dispatcher(resetNextConnectionTime())\n            $(window).off(\"scroll\")\n        };\n    }, []);\n\n\n    const handleLoadMore = () => {\n        if(departureTime !== null && nextConnectionTime === null){\n            dispatcher(addNextConnectionTime(weekDateConverter.convertFromDate(departureTime)))\n        }\n        if(nextConnectionTime !== null && beginStation !== null && endStation !== null && paths.length < maxPaths){\n            for(let i = 0; i < 3; i++){\n                const graph: Graph = new Graph(lines, nextConnectionTime , speed)\n                graph.setDestinationAndBeginning(beginStation, endStation)\n                graph.computeBestTime()\n                const result = graph.getFastestPath().reverse();\n                const path = {\n                    path: result.map(node => ({\n                        station: node.station,\n                        line: node.line,\n                        time: node.getTime(),\n                        reverse: node.reversed\n                    }))\n                }\n                //@ts-ignore\n                dispatcher(addPath(<Connection key={i+\"path\"+Math.random()} path={path.path}/>))\n                nextConnectionTime = weekDateConverter.convert(path.path[0].time)\n                dispatcher(addNextConnectionTime(weekDateConverter.convert(path.path[0].time)))\n            }\n        }\n    }\n    handleLoadMore()\n\n    const handleClick = () => {\n        dispatcher(increaseMaxPaths(3));\n        handleLoadMore()\n    }\n\n    const loadMoreButton = paths.length < 3 ? '' :\n        <div className=\"load-more-button-wrapper\">\n            <button className=\"load-more-button\" onClick={handleClick}>Załaduj więcej</button>\n        </div>\n\n    return(\n        <div>\n            {paths}\n            {loadMoreButton}\n        </div>\n    )\n}\n\nexport default ConnectionsWrapper;","import React from \"react\";\nimport './ConnectionChoosingWrapper.css'\nimport ConnectionsDataChoosing from \"../ConnectionsDataChoosing/ConnectionsDataChoosing\";\nimport ConnectionsWrapper from \"../ConnectionsWrapper/ConnectionsWrapper\";\n\n\nconst ConnectionChoosingWrapper = () => {\n    return(\n        <div data-testid=\"connection-choosing-wrapper\" className=\"connection-choosing-wrapper\">\n            <ConnectionsDataChoosing />\n            <ConnectionsWrapper/>\n        </div>\n    )\n}\n\nexport default ConnectionChoosingWrapper;","import Line from \"./Line\";\n\nexport default class Station {\n    public stationNumber(line: Line){\n        const result = line.stations.indexOf(this);\n        //console.log(result+\" \"+line.name+\" \"+this._name);\n        return result;\n    }\n\n    get id(): number {\n        return this._id;\n    }\n\n    get location(): { lat: number; lon: number } {\n        return this._location;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    constructor(id: number, name: string, location: {lat: number, lon: number}) {\n        this._name = name;\n        this._location = location\n        this._id = id;\n    }\n\n    private readonly _name: string;\n\n    private readonly _id: number;\n\n    private readonly _location: {\n        lat: number,\n        lon: number\n    }\n}","import Station from \"./Station\";\nimport WeekDate from \"./WeekDate\";\n\nexport default class Line{\n\n    constructor(name: string, stations: Station[], begin: Station, end: Station, time: WeekDate[]) {\n        this._name = name;\n        this._stations = stations;\n        this._begin = begin;\n        this._end = end;\n        this._time = time;\n    }\n\n\n    get name(): string {\n        return this._name;\n    }\n\n    get stations(): Station[] {\n        return this._stations;\n    }\n\n    get begin(): Station {\n        return this._begin;\n    }\n\n    get end(): Station {\n        return this._end;\n    }\n\n    get time(): WeekDate[] {\n        return this._time;\n    }\n\n    private readonly _name: string;\n    private readonly _stations: Station[];\n    private readonly _begin: Station;\n    private readonly _end: Station;\n    private readonly _time: WeekDate[];\n\n}","import axios from \"axios\";\nimport Station from \"../../data/classes/Station\";\nimport Line from \"../../data/classes/Line\";\nimport WeekDateConverter from \"../WeekDateConverter/WeekDateConverter\";\nimport {StationJson} from \"../../data/types/StationJson\";\nimport {LinesJson} from \"../../data/types/LinesJson\";\nimport {LineJsonElement} from \"../../data/types/LineJsonElement\";\nimport {speed} from \"jquery\";\n\nexport default class DataProvider{\n    private static instance: DataProvider;\n    private _stations: Station[] = [];\n    private _lines: Line[] = [];\n\n    private constructor() {}\n\n\n    get stations(): Station[] {\n        return this._stations;\n    }\n\n    get lines(): Line[] {\n        return this._lines;\n    }\n\n    public static getInstance(){\n        if(!DataProvider.instance){\n            DataProvider.instance = new DataProvider();\n        }\n\n        return DataProvider.instance\n    }\n\n    public fetchData(){\n        return axios.all([axios.get('/jsons/stations.json'), axios.get('/jsons/lines.json')]).then((responses) => {\n            const {data: {stations}}:StationJson = responses[0];\n            const {data: {lines, speed} }:LinesJson = responses[1];\n            DataProvider.instance._stations = stations.map(station => {\n                return new Station(station.id, station.name, station.location);\n            })\n            DataProvider.instance._lines = lines.map(line => {\n                return DataProvider.createLineObject(line);\n            })\n            return {stations: DataProvider.instance.stations, lines: DataProvider.instance.lines, speed: speed }\n        }).catch(() => {\n            console.error('error with Internet Connection!');\n            return {stations: [], lines: [], speed: null }\n        });\n    }\n\n    private static createLineObject(line: LineJsonElement){\n        const weekDateConverter = new WeekDateConverter()\n        const lineStations = line.stations.map(stationID => {\n            const foundStation = DataProvider.instance._stations.find(stationToFind => {\n                return stationToFind.id === stationID\n            })\n            if(foundStation !== undefined){\n                return foundStation\n            }\n            else{\n                throw 'cannot find station with ID '+stationID\n            }\n        })\n        const beginStation = DataProvider.instance._stations.find(station => {\n            return station.id === line.begin\n        })\n        const endStation = DataProvider.instance._stations.find(station => {\n            return station.id === line.end\n        })\n        const weekDays = line.time.map(departureTime => {\n            return weekDateConverter.convert(departureTime)\n        })\n        if(beginStation === undefined){\n            throw `Line ${line.name} has wrong begin station id`\n        }\n        if(endStation === undefined){\n            throw `Line ${line.name} has wrong end station id`\n        }\n        return new Line(line.name, lineStations, beginStation, endStation, weekDays);\n    }\n\n}","import React, {useEffect} from \"react\";\nimport {Route, Switch} from \"react-router-dom\";\nimport MainPage from \"../MainPage/MainPage\";\nimport TrainStationWrapper from \"../TrainStationWrapper/TrainStationWrapper\";\nimport TrainChoosingWrapper from \"../TrainChoosingWrapper/TrainChoosingWrapper\";\nimport ConnectionChoosingWrapper from \"../ConnectionChoosingWrapper/ConnectionChoosingWrapper\";\nimport {useDispatch} from \"react-redux\";\nimport DataProvider from \"../../services/dataProvider/DataProvider\";\nimport {loadData} from \"../../actions/dataProviderActions\";\nimport StationDetails from \"../StationDetails/StationDetails\";\n\nconst Content = () => {\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const dataProvider = DataProvider.getInstance();\n        dataProvider.fetchData().then((data:any) => {\n            const stations = data.stations;\n            const lines = data.lines;\n            const speed = data.speed;\n\n            dispatch(loadData({stations, lines, speed}))\n        })\n\n\n\n    }, [])\n\n    return(\n        <Switch>\n            <Route exact path=\"/\" component={MainPage} />\n            <Route exact path=\"/przystanki\" component={TrainStationWrapper} />\n            <Route exact path=\"/linie\" component={TrainChoosingWrapper} />\n            <Route exact path=\"/znajdz-trase\" component={ConnectionChoosingWrapper} />\n        </Switch>\n    )\n}\n\nexport default Content;","import $ from \"jquery\";\nimport L from \"leaflet\";\nimport Station from \"../../data/classes/Station\";\n\nexport default class StationDetailsMapProvider{\n    public static set station(value: Station) {\n        this._station = value;\n    }\n    private static instance: StationDetailsMapProvider;\n    private static _station:Station;\n    private static isLayerAdded: boolean = false;\n    public map: any;\n\n    public static getInstance(station: Station){\n        let div = $('#station-details-map');\n        let width:number | undefined = div.width();\n        div.css('height', width+\"px\");\n        if(!StationDetailsMapProvider.instance){\n            StationDetailsMapProvider.instance = new StationDetailsMapProvider();\n        }\n        StationDetailsMapProvider.station = station;\n        return StationDetailsMapProvider.instance\n    }\n\n    public removeMap(){\n        StationDetailsMapProvider.instance.map.remove()\n        StationDetailsMapProvider.instance.map = undefined\n        StationDetailsMapProvider.isLayerAdded = false\n    }\n\n    public addStationToTheMap(){\n        const {location, name} = StationDetailsMapProvider._station\n        L.marker([location.lat, location.lon]).addTo(StationDetailsMapProvider.instance.map).bindPopup(name)\n    }\n\n    public addMap(){\n        if(StationDetailsMapProvider.instance.map === undefined){\n            const loc = StationDetailsMapProvider._station.location\n            StationDetailsMapProvider.instance.map = L.map('station-details-map').setView([loc.lat,  loc.lon], 13.1);\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n                attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>'\n            }).addTo(StationDetailsMapProvider.instance.map);\n        }\n    }\n\n    private constructor() {}\n\n\n}","import React, {useEffect} from \"react\";\nimport Station from \"../../data/classes/Station\";\nimport StationDetailsMapProvider from \"../../services/mapProviders/StationDetailsMapProvider\";\n\ntype propsType = {\n    station: Station\n}\n\nconst StationMap = (props: propsType) => {\n\n    useEffect(() => {\n        if(props.station !== undefined){\n            const mapProvider = StationDetailsMapProvider.getInstance(props.station)\n            mapProvider.addMap()\n            mapProvider.addStationToTheMap()\n            return () => {\n                mapProvider.removeMap()\n            }\n        }\n\n    },[])\n\n    return(\n        <div id=\"station-details-map\"></div>\n    )\n}\n\nexport default StationMap;","import React from \"react\";\nimport Station from \"../../data/classes/Station\";\nimport Line from \"../../data/classes/Line\";\nimport WeekDateConverter from \"../../services/WeekDateConverter/WeekDateConverter\";\nimport TrainTimeComputer from \"../../services/trainTimeComputer/TrainTimeComputer\";\nimport {useSelector} from \"react-redux\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport WeekDate from \"../../data/classes/WeekDate\";\nimport './StationDeparturesTimes.css'\n\ntype propsType = {\n    station: Station,\n    line: Line,\n    reversed: boolean\n}\n\ntype groupedTimes = {\n    0: WeekDate[],\n    1: WeekDate[],\n    2: WeekDate[],\n    3: WeekDate[],\n    4: WeekDate[],\n    5: WeekDate[],\n    6: WeekDate[],\n    7: WeekDate[]\n}\n\nconst StationDeparturesTimes = (props:propsType) => {\n\n    const trainsSpeed = useSelector((state:RootState) => state.data.data.speed);\n    const stationIndex = props.line.stations.indexOf(props.station);\n    const weekDateConverter = new WeekDateConverter();\n    const stationToCurrentStation = props.reversed ?\n        props.line.stations.concat(props.line.stations.slice(stationIndex, props.line.stations.length - 1).reverse()) :\n        props.line.stations.slice(0, stationIndex + 1)\n\n    const departuresTime = props.line.time.map(time => {\n        return weekDateConverter.convert( weekDateConverter.convertToSeconds(time) +\n            TrainTimeComputer.computeTimeBetweenStationsChain(stationToCurrentStation, trainsSpeed))\n    })\n\n    const result:groupedTimes = departuresTime.reduce(function (r, a) {\n        r[a.weekDay] = r[a.weekDay] || [];\n        r[a.weekDay].push(a);\n        return r;\n    }, Object.create(null));\n\n    for (const [key, value] of Object.entries(result)) {\n        // @ts-ignore\n        result[key] = value.sort((a, b) => {\n            return a.seconds - b.seconds\n        }).sort((a, b) => {\n            return a.minutes - b.minutes\n        }).sort((a, b) => {\n            return a.hours - b.hours\n        })\n    }\n\n    const components = Object.entries(result).map(([key, value]) => {\n        const hours = value.map(weekDate => {\n            return <span key={weekDate.hoursString()+\":\"+weekDate.minutesString()} className=\"hours-for-station\">{weekDate.hoursString()}:{weekDate.minutesString()}</span>\n        })\n\n        const polishWeekDayName = weekDateConverter.getPolishNameOfTheWeekDay(parseInt(key));\n\n        return(\n            <div key={polishWeekDayName+\"day-component\"} className=\"day-hours-component\">\n                <div>{polishWeekDayName}</div>\n                <div className=\"hours-container\">\n                    {hours}\n                </div>\n\n            </div>\n        )\n    })\n\n\n    return(\n        <div>\n            {components}\n        </div>\n    )\n}\n\nexport default StationDeparturesTimes;","import React, {useEffect, useState} from \"react\";\nimport Station from \"../../data/classes/Station\";\nimport Line from \"../../data/classes/Line\";\nimport LineComponent from \"../LineComponent/LineComponent\";\nimport './StationDetailsLine.css'\nimport StationDeparturesTimes from \"../StationDeparturesTimes/StationDeparturesTimes\";\nimport $ from 'jquery'\n\ntype propsType = {\n    station: Station,\n    line: Line\n}\n\ntype propsStationList = {\n    station: Station;\n    line: Line;\n    reversed: boolean;\n}\n\nconst StationList = (props: propsStationList) => {\n\n    let stations: Station[] = props.line.stations;\n    if(props.reversed){\n        stations = stations.slice().reverse();\n    }\n    const stationsHTML = stations.map((station, index) => {\n        const arrow = index !== props.line.stations.length - 1 ? <i className=\"icon-right-thin\"></i> : null\n        if(station.id === props.station.id){\n            return <span key={station.name+props.reversed+\"stlist\"}>\n                <strong className=\"span-station-name current-station\">\n                    {station.name}\n                </strong>\n                {arrow}\n            </span>\n        }\n        else {\n            return <span key={station.name+props.reversed+\"stlist\"}>\n                <span className=\"span-station-name\">\n                    {station.name}\n                </span>\n                {arrow}\n            </span>\n        }\n    })\n\n    return(\n        <div>\n            {stationsHTML}\n        </div>\n    )\n}\n\nconst StationDetailsLine = (props:propsType) => {\n\n    const [showForward, setShowForward] = useState(false);\n    const [showReverse, setShowReverse] = useState(false);\n\n    const handleForwardClick = () => setShowForward(state => !state);\n    const handleReversedClick = () => setShowReverse(state => !state);\n\n    return(\n        <div className=\"stations-details-line\">\n            <div className=\"line-wrapper\">\n                <LineComponent line={props.line} />\n                <div>\n                    <div>\n                        <div className=\"show-hours-icon\" onClick={handleForwardClick}>\n                            Kierunek: <strong>{props.line.end.name}</strong>\n                            <div className={showForward ? \"show-content icons-hours-wrapper\" : \"hide-content icons-hours-wrapper\"}>\n                                <i className=\"icon-down-open\" ></i>\n                            </div>\n                        </div>\n                        <div className=\"hours-container\" style={showForward ? {height: \"auto\"} : {height: \"0px\"}}>\n                            <StationList station={props.station} line={props.line} reversed={false} />\n                            <StationDeparturesTimes station={props.station} line={props.line} reversed={false} />\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <div>\n                        <div className=\"show-hours-icon\" onClick={handleReversedClick}>\n                            Kierunek: <strong>{props.line.begin.name}</strong>\n                            <div className={showReverse ? \"show-content icons-hours-wrapper\" : \"hide-content icons-hours-wrapper\"}>\n                                <i className=\"icon-down-open\" ></i>\n                            </div>\n                        </div>\n                        <div className=\"hours-container\" style={showReverse ? {height: \"auto\"} : {height: \"0px\"}}>\n                            <StationList station={props.station} line={props.line} reversed={true} />\n                            <StationDeparturesTimes station={props.station} line={props.line} reversed={true} />\n                        </div>\n                    </div>\n                </div>\n\n\n            </div>\n            <hr />\n        </div>\n    )\n}\n\nexport default StationDetailsLine;","import React from \"react\";\nimport Line from \"../../data/classes/Line\";\nimport {useSelector} from \"react-redux\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport Station from \"../../data/classes/Station\";\nimport StationDetailsLine from \"../StationDetailsLine/StationDetailsLine\";\n\ntype propTypes = {\n    station: Station\n}\n\nconst StationDetailsLinesWrapper = (props:propTypes) => {\n\n\n    const lines:Line[] = useSelector((state:RootState) => state.data.data.lines);\n    if(props.station !== undefined){\n        const linesContainingStation = lines.filter(line => line.stations.find(station => station.id === props.station.id) !== undefined)\n        const stationDetailsLines = linesContainingStation.map(line => <StationDetailsLine key={line.name+\" \"+props.station.id}\n                                                                                           line={line}\n                                                                                           station={props.station}/>)\n\n        return(\n            <div>\n                {stationDetailsLines}\n            </div>\n        )\n    }\n    else{\n        return (\n            <div></div>\n        )\n    }\n\n}\n\nexport default StationDetailsLinesWrapper;","import React from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport './StationDetails.css'\nimport Station from \"../../data/classes/Station\";\nimport {useSelector} from \"react-redux\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport StationMap from \"../StationMap/StationMap\";\nimport StationDetailsLinesWrapper from \"../StationDetailsLinesWrapper/StationDetailsLinesWrapper\";\n\ntype StationParams = {\n    id: string;\n};\n\ntype StationDidntFoundProps = {\n    id: string\n}\n\nconst StationDidntFound = (props: StationDidntFoundProps) => {\n    return(\n        <section>\n            <h2>\n                Błąd 404 <br />\n                Nie znaleziono stacji o id równym {props.id}\n            </h2>\n        </section>\n    )\n}\n\nconst StationDetails = () => {\n\n    const { id } = useParams<StationParams>()\n    const stations: Station[] = useSelector((state: RootState) => state.data.data.stations);\n    const station: Station|undefined = stations.find(station => station.id === parseInt(id, 10))\n\n    if(station === undefined){\n        return(\n            <>\n                <div className=\"station-details\">\n                    <div className=\"station-details-content\">\n                        <StationDidntFound id={id}/>\n                    </div>\n                </div>\n            </>\n        )\n    }\n    else{\n        return(\n            <>\n                <div className=\"station-details\">\n                    <div className=\"station-details-content\">\n                        <section>\n                            <h2>Szczegóły na temat wybranej stacji: {station.name}</h2>\n\n                            <StationMap station={station} />\n                            <div className=\"station-lines-container\">\n                                <h2>Odjazdy pociągów</h2>\n                                <StationDetailsLinesWrapper station={station} />\n                            </div>\n                        </section>\n                    </div>\n                </div>\n            </>\n        )\n    }\n\n\n\n}\n\nexport default StationDetails;","import Line from \"../../data/classes/Line\";\nimport $ from \"jquery\";\nimport L, {LatLngExpression} from \"leaflet\";\nimport Station from \"../../data/classes/Station\";\n\nexport default class LineDetailsMapProvider{\n    public static set line(value: Line) {\n        this._line = value;\n    }\n    private static instance: LineDetailsMapProvider;\n    private static _line:Line;\n    private static isLayerAdded: boolean = false;\n    public map: any;\n\n    public static getInstance(line: Line){\n        let div = $('#line-details-map');\n        let width:number | undefined = div.width();\n        div.css('height', width+\"px\");\n        if(!LineDetailsMapProvider.instance){\n            LineDetailsMapProvider.instance = new LineDetailsMapProvider();\n        }\n        LineDetailsMapProvider.line = line;\n        return LineDetailsMapProvider.instance\n    }\n\n    public removeMap(){\n        LineDetailsMapProvider.instance.map.remove()\n        LineDetailsMapProvider.instance.map = undefined\n        LineDetailsMapProvider.isLayerAdded = false\n    }\n\n    public addMap(){\n        if(LineDetailsMapProvider.instance.map === undefined){\n            LineDetailsMapProvider.instance.map = L.map('line-details-map').setView([50.265951,  19.616134], 12.1);\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n                attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>'\n            }).addTo(LineDetailsMapProvider.instance.map);\n        }\n    }\n\n    public addPointsToTheMap(){\n        LineDetailsMapProvider._line.stations.forEach(station => {\n            L.marker([station.location.lat, station.location.lon]).addTo(LineDetailsMapProvider.instance.map)\n                .bindPopup(station.name)\n        })\n    }\n\n\n    public drawLine() {\n        const points: LatLngExpression[] = LineDetailsMapProvider._line.stations.map(station => {\n            return [station.location.lat, station.location.lon]\n        })\n        let polyline = L.polyline(points).addTo(LineDetailsMapProvider.instance.map)\n        polyline.setStyle({\n            color: \"blue\",\n            weight: 6\n        })\n    }\n\n    private constructor() {}\n}","import React, {useEffect} from \"react\";\nimport Line from \"../../data/classes/Line\";\nimport LineDetailsMapProvider from \"../../services/mapProviders/LineDetailsMapProvider\";\n\ntype LineMapProps = {\n    line: Line\n}\n\nconst LineMap = (props: LineMapProps) => {\n\n    useEffect(() => {\n        if(props.line !== undefined){\n            const mapProvider = LineDetailsMapProvider.getInstance(props.line)\n            mapProvider.addMap()\n            mapProvider.drawLine()\n            mapProvider.addPointsToTheMap()\n            return () => {\n                mapProvider.removeMap()\n            }\n        }\n\n    },[])\n\n    return(\n        <div id=\"line-details-map\">\n\n        </div>\n    )\n}\n\nexport default LineMap;","import React from \"react\";\nimport Line from \"../../data/classes/Line\";\nimport StationComponent from \"../StationComponent/StationComponent\";\nimport './LineDetailsStationsWrapper.css'\n\ntype propsType = {\n    line: Line\n}\n\nconst LineDetailsStationsWrapper = (props: propsType) => {\n\n    const stationComponents = props.line.stations.map((station, index) => {\n        const arrow = index < props.line.stations.length - 1 ? <div className=\"icon-wrapper\"><i className=\"icon-right-thin\"></i></div> : null\n        return <StationComponent station={station} />\n\n    })\n\n    return(\n        <div className=\"stations-of-lines\">\n            {stationComponents}\n        </div>\n    )\n}\n\nexport default LineDetailsStationsWrapper;","import React from \"react\";\nimport './LineDetails.css'\nimport {useParams} from \"react-router-dom\";\nimport {useSelector} from \"react-redux\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport Line from \"../../data/classes/Line\";\nimport LineMap from \"../LineMap/LineMap\";\nimport LineDetailsStationsWrapper from \"../LineDetailsStationsWrapper/LineDetailsStationsWrapper\";\nimport StationDeparturesTimes from \"../StationDeparturesTimes/StationDeparturesTimes\";\n\ntype LineParams = {\n    name: string;\n};\n\nconst LineDidntFound = (props: LineParams) => {\n    return(\n        <section>\n            <h2>\n                Błąd 404 <br />\n                Nie znaleziono linii o nazwie {props.name}\n            </h2>\n        </section>\n    )\n}\n\nconst LineDetails = () => {\n\n    let { name } = useParams<LineParams>()\n    name = name.toUpperCase()\n    const lines: Line[] = useSelector((state: RootState) => state.data.data.lines);\n    const line: Line|undefined = lines.find(line => line.name === name)\n\n    if(line === undefined){\n        return(\n            <>\n                <div className=\"line-details\">\n                    <div className=\"line-details-content\">\n                        <LineDidntFound name={name} />\n                    </div>\n                </div>\n            </>\n        )\n    }\n    else{\n        return(\n            <>\n                <div className=\"line-details\">\n                    <div className=\"line-details-content\">\n                        <section>\n                            <h2>Szczegóły na temat wybranej linii: {line.name}</h2>\n                            <LineMap line={line}/>\n                        </section>\n                        <section className=\"line-stations-container\">\n                            <h2>Przystanki (w kolejności przejazdu):</h2>\n                            <LineDetailsStationsWrapper line={line}/>\n                            <hr />\n                            <h2>Godziny odjazdów:</h2>\n                            <h3><i className=\"icon-train\"></i>Kierunek: {line.end.name} </h3>\n                            <h3>Stacja początkowa: {line.begin.name}</h3>\n                            <StationDeparturesTimes station={line.stations[0]} line={line} reversed={false} />\n                            <h3><i className=\"icon-train\"></i>Kierunek: {line.begin.name} </h3>\n                            <h3>Stacja początkowa: {line.end.name}</h3>\n                            <StationDeparturesTimes station={line.stations[0]} line={line} reversed={true} />\n                        </section>\n                    </div>\n                </div>\n            </>\n        )\n    }\n\n}\n\nexport default LineDetails;","import React from \"react\";\nimport WeekDate from \"../../data/classes/WeekDate\";\nimport Station from \"../../data/classes/Station\";\nimport StationComponent from \"../StationComponent/StationComponent\";\nimport './StationTime.css'\n\ntype propsType = {\n    station: Station,\n    time: WeekDate\n}\n\nconst StationTime = (props: propsType) => {\n\n\n\n    return(\n        <div className=\"station-time\">\n            <StationComponent station={props.station} />\n            <p>{props.time.hoursString()+\":\"+props.time.minutesString()}</p>\n        </div>\n    )\n}\n\nexport default StationTime;","import React from \"react\";\nimport Station from \"../../data/classes/Station\";\nimport Line from \"../../data/classes/Line\";\nimport './OneLineConnection.css'\nimport StationTime from \"../StationTime/StationTime\";\nimport WeekDateConverter from \"../../services/WeekDateConverter/WeekDateConverter\";\nimport LineComponent from \"../LineComponent/LineComponent\";\n\ntype propsType = {\n    color: string,\n    line: Line,\n    path: [\n        {\n            station: Station,\n            time: number\n        }\n    ],\n    reverse: boolean\n}\n\nconst OneLineConnection = (props:propsType) => {\n\n    const weekDateConverter = new WeekDateConverter();\n    const stations = props.path.map(node => <StationTime time={weekDateConverter.convert(node.time)} key={node.station.name+\"station-time\"+Math.random()} station={node.station}/>)\n\n    return(\n        <div className=\"one-line-connection\" style={{backgroundColor: props.color}}>\n            <div>\n                <p>Kierunek: {props.reverse ? props.line.begin.name : props.line.end.name}</p>\n                <LineComponent line={props.line}/>\n            </div>\n            <div className=\"one-line-connection-inner\">\n\n                {stations}\n            </div>\n        </div>\n\n    )\n}\n\nexport default OneLineConnection;","import React from \"react\";\nimport Station from \"../../data/classes/Station\";\nimport Line from \"../../data/classes/Line\";\nimport OneLineConnection from \"../OneLineConnection/OneLineConnection\";\n\ntype propsType = {\n    path: [\n        {\n            station: Station,\n            line: Line,\n            time: number,\n            reverse: boolean\n        }\n    ],\n    colors: string[]\n}\n\nconst OneConnectionDetails = (props: propsType) => {\n    const lines = []\n    const colors = props.colors\n    let currentLines = []\n    let colorIndex = 0;\n    for(let i = 0; i < props.path.length; i++){\n        currentLines.push(props.path[i])\n        if( i === props.path.length - 1 || props.path[i].line.name !== props.path[i + 1].line.name){\n            //@ts-ignore\n            lines.push(<OneLineConnection reverse={props.path[i].reverse} line={props.path[i].line} key={props.path[i].line+Math.random()} color={colors[colorIndex++]} path={currentLines}/>)\n            currentLines = []\n        }\n    }\n\n    return(\n        <div>\n            {lines}\n        </div>\n    )\n}\n\nexport default OneConnectionDetails;","import $ from \"jquery\";\nimport L, {LatLngExpression} from \"leaflet\";\nimport Station from \"../../data/classes/Station\";\nimport Line from \"../../data/classes/Line\";\nimport WeekDateConverter from \"../WeekDateConverter/WeekDateConverter\";\n\ntype path = {\n    path: [\n        {\n            station: Station,\n            line: Line,\n            time: number\n        }\n    ]\n}\n\nexport default class ConnectionMapProvider{\n    private static instance: ConnectionMapProvider;\n    private static isLayerAdded: boolean = false;\n\n    public map: any;\n\n    private constructor() {\n\n    }\n\n    public static getInstance(){\n        let div = $('#mapdiv-connection');\n        let width:number | undefined = div.width();\n        div.css('height', width+\"px\");\n\n        if(!ConnectionMapProvider.instance){\n            ConnectionMapProvider.instance = new ConnectionMapProvider();\n        }\n\n        return ConnectionMapProvider.instance\n    }\n\n    public removeMap(){\n        ConnectionMapProvider.instance.map.remove()\n        ConnectionMapProvider.instance.map = undefined\n        ConnectionMapProvider.isLayerAdded = false\n    }\n\n    public addMap(){\n        if(ConnectionMapProvider.instance.map === undefined){\n            ConnectionMapProvider.instance.map = L.map('mapdiv-connection').setView([50.265951,  19.616134], 12.1);\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n                attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>'\n            }).addTo(ConnectionMapProvider.instance.map);\n        }\n    }\n\n    public addConnections(path: path, colors: string){\n        const weekDateConverter = new WeekDateConverter()\n        let colorIndex = 0;\n        path.path.forEach((p, i) => {\n            const date = weekDateConverter.convert(p.time);\n            const stringDate = date.hoursString()+\":\"+date.minutesString()\n            L.marker([p.station.location.lat, p.station.location.lon]).addTo(ConnectionMapProvider.instance.map).bindPopup(p.station.name+\"<br>\"+p.line.name+\"<br>\"+stringDate);\n            if(i > 0){\n                const points:LatLngExpression[] = [[p.station.location.lat, p.station.location.lon], [path.path[i-1].station.location.lat, path.path[i-1].station.location.lon]]\n                let poly = L.polyline(points).addTo(this.map);\n                if(p.line.name !== path.path[i - 1].line.name){\n                    colorIndex++\n                }\n                poly.setStyle({\n                    color: colors[colorIndex],\n                    weight: 6\n                })\n            }\n        })\n    }\n}","import React, {useEffect} from \"react\";\nimport './ConnectionMap.css'\nimport ConnectionMapProvider from \"../../services/mapProviders/ConnectionMapProvider\";\nimport Station from \"../../data/classes/Station\";\nimport Line from \"../../data/classes/Line\";\n\ntype path = {\n    path: [\n        {\n            station: Station,\n            line: Line,\n            time: number\n        }\n    ]\n}\n\nconst ConnectionMap = (props:path) => {\n\n    const colors = ['blue','yellow','green','red']\n\n    useEffect(() =>{\n        const connectionMap = ConnectionMapProvider.getInstance()\n        connectionMap.addMap()\n        if(props.path !== undefined){\n            //@ts-ignore\n            connectionMap.addConnections(props, colors);\n        }\n        return () => {\n            connectionMap.removeMap()\n        }\n    })\n\n    return(\n        <div id=\"mapdiv-connection\">\n\n        </div>\n    )\n}\n\nexport default ConnectionMap;","import React from \"react\";\nimport './ConnectionDetails.css'\nimport {useParams} from \"react-router-dom\";\nimport Station from \"../../data/classes/Station\";\nimport {useSelector} from \"react-redux\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport Line from \"../../data/classes/Line\";\nimport OneConnectionDetails from \"../OneConnectionDetails/OneConnectionDetails\";\nimport ConnectionMap from \"../ConnectionMap/ConnectionMap\";\n\ntype propsType = {\n    path: [\n        {\n            station: Station,\n            line: Line,\n            time: number,\n            reverse: boolean\n        }\n    ]\n}\n\nconst ConnectionDetails = () => {\n    let colors = ['#c8c7f0','#ebeba7','#ccf0c7','#f2a083']\n    const { stations } : any = useParams();\n    const stationsFromState: Station[] = useSelector((state: RootState) => state.data.data.stations);\n    const linesFromState: Line[] = useSelector((state: RootState) => state.data.data.lines);\n    const stringDataFromParams = stations.split(\"-\");\n    const path = []\n    for(let i = 0; i < stringDataFromParams.length - 3; i+=4){\n        const lineName = stringDataFromParams[i]\n        const stationID = stringDataFromParams[i + 1]\n        const time = parseInt(stringDataFromParams[i + 2])\n        const reverse = stringDataFromParams[i + 3] === \"false\" ? false : true\n        path.push({\n            station: stationsFromState.find(station => station.id.toString() === stationID),\n            line: linesFromState.find(line => line.name === lineName),\n            time: time,\n            reverse\n        })\n    }\n\n    return(\n        <div className=\"connection-details\">\n            {/*@ts-ignore*/}\n            <ConnectionMap path={path} />\n            {/*@ts-ignore*/}\n            <OneConnectionDetails path={path} colors={colors}/>\n        </div>\n    )\n}\n\nexport default ConnectionDetails;","import React from \"react\";\nimport {Route, Switch} from \"react-router-dom\";\nimport StationDetails from \"../StationDetails/StationDetails\";\nimport LineDetails from \"../LineDetails/LineDetails\";\nimport ConnectionDetails from \"../ConnectionDetails/ConnectionDetails\";\n\nconst PopupWrapper = () => {\n    return(\n        <Switch>\n            <Route path=\"/linie/:name\" component={LineDetails} />\n            <Route path=\"/przystanki/:id\" component={StationDetails}/>\n            <Route path=\"/connection/:stations\" component={ConnectionDetails} />\n        </Switch>\n    )\n}\n\nexport default PopupWrapper;","import React from 'react';\nimport {Provider} from 'react-redux'\nimport { store } from \"../../store/store\";\n\nimport './App.css';\nimport Nav from \"../Nav/Nav\";\nimport Content from \"../Content/Content\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport PopupWrapper from \"../PopupWrapper/PopupWrapper\";\n\n\nfunction App() {\n\n    return (\n            <Provider store={store}>\n                <div className=\"App\" data-testid=\"app\">\n                    <BrowserRouter basename={process.env.PUBLIC_URL}>\n                        <Nav/>\n                        <Content/>\n                        <PopupWrapper />\n                    </BrowserRouter>\n                </div>\n            </Provider>\n\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}